actor IsAIMarine : Inventory {}
// [Xindage] Important note: Never use goto in the marines, just dynamic jumps. loops are ok.
// Read more about in https://zdoom.org/wiki/Using_inheritance
// The reason of this base existence is to decrease the amount of copy paste and let all marines inherit from this marine data.
Actor MBase : PlayerPawn	// Basic unarmed marine.
{

	DropItem "AmmoPack"
	Speed 0					// ThrustThing and A_Recoil instead.
	MaxDropOffHeight 63		// Gives the marines a smaller chance of falling into pits. 63, not 64.
	PainSound "*pain"
	MaxStepHeight 56		// This is not too much?
	obituary "%o was killed by a \cadebug marine's\c- nothing."
	Health 115
	Radius 16
	Height 56
	Mass 100
	Painchance 200
//	MaxTargetRange 128		// For close quarter weapons.
	+CANPASS
	+CANPUSHWALLS
	+CANUSEWALLS
	+FLOORCLIP
	+WINDTHRUST
	+NOBLOCKMONST
	+SOLID
	+SHOOTABLE
	+QUICKTORETALIATE
	+NODROPOFF				// In conjunction with MaxDropOffHeight.
	+ISMONSTER				// Needed for the marines to take any projectile damage in invasion mode.
	-COUNTKILL				// In conjunction with +ISMONSTER.
	+NEVERFAST				// Same as above.
	//+NOTIMEFREEZE
	+LOOKALLAROUND
	-TELESTOMP
	deathsound "generic/death"

	//	Translation "112:127=[0,68,181]:[0,0,0]"	//Blue
	//	Translation "112:127=[160,0,0]:[0,0,0]"		//Red
	//	DesignatedTeam x (0 Blue 1 Red)

//AOW Base DamageFactoring-----------------------------------------------------------------------

	damagefactor "Fist", 1.0
	damagefactor "Bullet", 1.0
	damagefactor "Rifle", 1.0
	damagefactor "Explosion", 0.3
	damagefactor "Suicide", 1.0
	damagefactor "Fire", 1.0
	damagefactor "Chemical", 2.0
	damagefactor "ChemicalSpecial", 0.0
	damagefactor "Energy", 1.0
	damagefactor "AntiArmor", 0.1
	damagefactor "Time", 1.0
	damagefactor "Disarm", 0.0
	damagefactor "Deconstruction", 0.0
	damagefactor "MassDriver", 0.3	
	damagefactor "Mechstomp", 0.0
	damagefactor "Monster", 1.0

//-----------------------------------------------------------------------

	States //Sorry about the ridiculously long state names.
	{

//-----------------------------------------------------------------------
//
//					Spawn and idle states.
//
//-----------------------------------------------------------------------
// Y - Yes and N - No - means states that can be used by all other marines whitout issues.

	Spawn: // N
		TNT1 A 0 // Dummy frame needed.
//		TNT1 A 0 A_GiveInventory("IsTeam", 1) // Give team items here
		TNT1 A 0 A_ChangeFlag("Friendly", 0) // Execute ACS script(s) after here.
		TNT1 A 0 ACS_ExecuteAlways (993, 0, 1, ARMOD_NOCHANGE) // ACS 993 must be used by ai marines.
		TNT1 A 0 ACS_ExecuteAlways (SC_MARINE_INIT, 0)
		TNT1 A 0 A_Jump (256, "EnablePushablePreIdle")
		Stop

	EnablePushablePreIdle: // Y
	// Allows you to push marines if they are in your way while idling.
		TNT1 A 0 A_ChangeFlag ("PUSHABLE", 1) // Allows you to push marines if they are in your way while idling.
		TNT1 A 0 A_Jump (256, "Idle")
		Stop

	Idle: // N
	// Check if pushed, then look for enemies. If player out of sight, begin to wander. If underwater, sink down.
		TNT1 A 0 A_JumpIf (momx != 0 || momy != 0, "MomentumCheck")

		PLAY A 1 A_LookEx (0, 0, 0, 1200, 360, "DisablePushablePreAlternateChase")
		TNT1 A 0 A_CheckSight ("DisablePushablePreAlternateWander")

		TNT1 A 0 A_JumpIf (z - floorz == 0, 4) //If non-deep water or at bottom, don't sink.
		TNT1 A 0 A_JumpIf (waterlevel == 1, "SinkDown1")
		TNT1 A 0 A_JumpIf (waterlevel == 2, "SinkDown2")
		TNT1 A 0 A_JumpIf (waterlevel == 3, "SinkDown3")
		TNT1 A 0
		Loop

//-----------------------------------------------------------------------

	MomentumCheck: // N
		TNT1 A 0 A_JumpIf (momx == 0 && momy == 0, "Idle")
		PLAY A 4
		TNT1 A 0 A_JumpIf (momx == 0 && momy == 0, "Idle")
		PLAY B 4
		TNT1 A 0 A_JumpIf (momx == 0 && momy == 0, "Idle")
		PLAY C 4
		TNT1 A 0 A_JumpIf (momx == 0 && momy == 0, "Idle")
		PLAY D 4
		TNT1 A 0 A_Jump (256, "CheckIfAnyTargetsWhilePushed")
		Stop

	CheckIfAnyTargetsWhilePushed: // Y
	// Look for potential targets while being pushed.
		TNT1 A 0 A_LookEx (0, 0, 0, 1200, 0, "DisablePushablePreAlternateChase")
		TNT1 A 0 A_Jump (256, "Idle")
		Stop

//-----------------------------------------------------------------------
// Y all
	SinkDown1: //Ankle deep.
		TNT1 A 0 ThrustThingZ (0, 2, 1, 1)
		TNT1 A 0 A_Jump (256, "Idle")
		Stop

	SinkDown2: //Waist deep.
		TNT1 A 0 ThrustThingZ (0, 1, 1, 1)
		TNT1 A 0 A_Jump (256, "Idle")
		Stop
	
	SinkDown3: //Cmpletely underwater. Slower sinking.
		TNT1 A 0 ThrustThingZ (0, 2, 1, 0)
		TNT1 A 0 A_Jump (256, "Idle")
		Stop


//-----------------------------------------------------------------------
//
//	Chase, check target, check if stuck/underwater and back off states.
//
//-----------------------------------------------------------------------

	See: // Y
	// Simply for A_SpidRefire. Goes to "ResetTimers".
		TNT1 A 0 //Dummy frame needed.
		TNT1 A 0 A_Jump (256, "ResetTimers")
		Stop

	DisablePushablePreAlternateChase: // Y
		TNT1 A 0 A_ChangeFlag ("PUSHABLE", 0)
		TNT1 A 0 A_Jump (256, "AlternateChase")
		Stop

	AlternateChase: // Y
		TNT1 A 0 A_Jump (85, "ChaseForwardAndLeft", "ChaseForwardAndRight") //1/3 chance of straferunning.
		TNT1 A 0 A_Jump (256, "ChaseForward")
		Stop

	ChaseForward: // N
		PLAY A 4 A_Recoil (-6.125)
		PLAY B 4 A_Recoil (-6.125)
		PLAY C 4 A_Recoil (-6.125)
		PLAY D 4 A_Recoil (-6.125)
		TNT1 A 0 A_Jump (256, "TurnAndAcquireTargetWhileChase")
		Stop

	ChaseForwardAndLeft: // N
	// Straferunning 28% faster.
		TNT1 A 0 ThrustThing (angle*256/360-38.7, 7, 0, 0)
		PLAY A 4 A_Recoil (-0.84)
		TNT1 A 0 ThrustThing (angle*256/360-38.7, 7, 0, 0)
		PLAY B 4 A_Recoil (-0.84)
		TNT1 A 0 ThrustThing (angle*256/360-38.7, 7, 0, 0)
		PLAY C 4 A_Recoil (-0.84)
		TNT1 A 0 ThrustThing (angle*256/360-38.7, 7, 0, 0)
		PLAY D 4 A_Recoil (-0.84)
		TNT1 A 0 A_Jump (256, "TurnAndAcquireTargetWhileChase")
		Stop

	ChaseForwardAndRight: // N
		TNT1 A 0 ThrustThing (angle*256/360+38.7, 7, 0, 0)
		PLAY A 4 A_Recoil (-0.84)
		TNT1 A 0 ThrustThing (angle*256/360+38.7, 7, 0, 0)
		PLAY B 4 A_Recoil (-0.84)
		TNT1 A 0 ThrustThing (angle*256/360+38.7, 7, 0, 0)
		PLAY C 4 A_Recoil (-0.84)
		TNT1 A 0 ThrustThing (angle*256/360+38.7, 7, 0, 0)
		PLAY D 4 A_Recoil (-0.84)
		TNT1 A 0 A_Jump (256, "TurnAndAcquireTargetWhileChase")
		Stop

	TurnAndAcquireTargetWhileChase: // Y
	// Allows for marines to turn and acquire targets.
		TNT1 AAAAAAAAAAAAAAAA 0 A_Chase ("", "")
		TNT1 A 0 A_Jump (256, "CheckIfTargetInLOS")
		Stop

	CheckIfTargetInLOS: // Y
	// Every PLAY A frames allows for attack or backing off. This is to make the marines animate properly.
		TNT1 A 0 A_JumpIfTargetInLOS ("TargetInLOS")
		TNT1 A 0 A_Jump (256, "CheckIfStuck")
		Stop

	TargetInLOS: // Y
		TNT1 A 0 A_JumpIf (health <= 39, 3) //If 39 health or lower, get more aggressive.
		TNT1 A 0 A_JumpIfCloser (256, "AlternateBackOff") // The threshold of when to back off.
		TNT1 A 0 A_Jump (random(0, 256), "CheckIfStuck") // Makes the marines less inhuman.
		TNT1 A 0 A_JumpIfCloser (4096, "Missile") // Max target range.
		TNT1 A 0 A_Jump (256, "CheckIfStuck")
		Stop

//-----------------------------------------------------------------------

	CheckIfStuck: // Y
	// This state act as a "dynamic threshold timer". Checks if there is any momentum along the x- and y- axis.
	// If false, add to the threshold timer. If true, clear the threshold timer and check if underwater instead.
		TNT1 A 0 A_JumpIf (momx != 0 || momy != 0, "NotStuck")
		TNT1 A 0 A_Jump (256, "CheckIfUnderwater")
		Stop

	NotStuck: // Y
		TNT1 A 0 A_JumpIfInventory ("MoveBackwardsThreshold", 0, "CheckIfUnderwater")
		TNT1 A 0 A_TakeInventory ("MoveBackwardsThreshold", 1)
		TNT1 A 0 A_Jump (256, "CheckIfUnderwater")
		Stop

	Stuck: // Y
		TNT1 A 0 A_JumpIf (momx == 0 && momy == 0, "AddToMoveBackWardsThresholdTimer")
		TNT1 A 0 A_Jump (256, "CheckIfUnderwater")
		Stop

//-----------------------------------------------------------------------

	CheckIfUnderWater: // Y
		TNT1 A 0 A_JumpIf (waterlevel == 1, "Swim1")
		TNT1 A 0 A_JumpIf (waterlevel == 2, "Swim2")
		TNT1 A 0 A_JumpIf (waterlevel == 3, "Swim3")
		TNT1 A 0 A_Jump (256, "AddToTimers") // If not underwater, add to the regular timers instead.
		Stop

	Swim1: // Y
		TNT1 A 0 A_JumpIf (z - floorz == 0, 2) //If non-deep water, don't swim.
		TNT1 A 0 ThrustThingZ (0, 8, 0, 1) //Simulates jumping/swimming in water.
		PLA6 A 0
		TNT1 A 0 A_Jump (256, "AddToTimers")
		Stop

	Swim2: // Y
		TNT1 A 0 ThrustThingZ (0, 16, 0, 1)
		TNT1 A 0 A_Jump (256, "AddToTimers")
		Stop

	Swim3: // Y
		TNT1 A 0 ThrustThingZ (0, 32, 0, 1)
		TNT1 A 0 A_Jump (256, "AddToTimers")
		Stop

//-----------------------------------------------------------------------

	AddToMoveBackWardsThresholdTimer: // Y
		TNT1 A 0 A_GiveInventory ("MoveBackwardsThreshold", 1)
		TNT1 A 0 A_Jump (256, "CheckMoveBackWardsThresholdTimer")
		Stop

	CheckMoveBackWardsThresholdTimer: // Y
		TNT1 A 0 A_JumpIfInventory ("MoveBackwardsThreshold", 1, "ClearMoveBackWardsThresholdTimer")
		TNT1 A 0 A_Jump (256, "CheckIfUnderwater")
		Stop

	ClearMoveBackWardsThresholdTimer: // Y
		TNT1 A 0 A_TakeInventory ("MoveBackwardsThreshold", 1)
		TNT1 A 0 A_Jump (256, "MoveBackwardsAlternate")
		Stop

//-----------------------------------------------------------------------

	MoveBackwardsAlternate: // Y
	// Same "A_Recoil" and "ThrustThing" values as in "BackOff" states, but with jumps to a different state.
		TNT1 A 0 A_Jump (256, "MoveBackwards", "MoveBackwardsAndLeft", "MoveBackwardsAndRight")
		Stop

	MoveBackwards: // N
		PLAY A 4 A_Recoil (6.125)
		PLAY B 4 A_Recoil (6.125)
		PLAY C 4 A_Recoil (6.125)
		PLAY D 4 A_Recoil (6.125)
		TNT1 A 0 A_Jump (random(128, 256), "AddToTimers")
		Loop

	MoveBackwardsAndLeft: // N
		PLAY A 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360+166.7, 7, 0, 0)
		PLAY B 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360+166.7, 7, 0, 0)
		PLAY C 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360+166.7, 7, 0, 0)
		PLAY D 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360+166.7, 7, 0, 0)
		TNT1 A 0 A_Jump (random(128, 256), "AddToTimers")
		Loop

	MoveBackwardsAndRight: // N
		PLAY A 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360-166.7, 7, 0, 0)
		PLAY B 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360-166.7, 7, 0, 0)
		PLAY C 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360-166.7, 7, 0, 0)
		PLAY D 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360-166.7, 7, 0, 0)
		PLA6 D 0 A_Jump (random(128, 256), "AddToTimers")
		Loop


//-----------------------------------------------------------------------
//
//	Wander, check target, check if stuck/underwater and back off states.
//
//-----------------------------------------------------------------------

	DisablePushablePreAlternateWander: // Y
	// Nearly identical to chase states.
		TNT1 A 0 A_ChangeFlag ("PUSHABLE", 0)
		TNT1 A 0 A_Jump (256, "AlternateWander")
		Stop

	AlternateWander: // Y
		TNT1 A 0 A_Jump (85, "WanderForwardAndLeft", "WanderForwardAndRight")
		TNT1 A 0 A_Jump (256, "WanderForward")
		Stop

	WanderForward: // N
		PLAY A 4 A_Recoil (-6.125)
		PLAY B 4 A_Recoil (-6.125)
		PLAY C 4 A_Recoil (-6.125)
		PLAY D 4 A_Recoil (-6.125)
		TNT1 A 0 A_Jump (256, "TurnAndAcquireTargetWhileWander")
		Stop

	WanderForwardAndLeft: // N
		TNT1 A 0 ThrustThing (angle*256/360-38.7, 7, 0, 0)
		PLAY A 4 A_Recoil (-0.84)
		TNT1 A 0 ThrustThing (angle*256/360-38.7, 7, 0, 0)
		PLAY B 4 A_Recoil (-0.84)
		TNT1 A 0 ThrustThing (angle*256/360-38.7, 7, 0, 0)
		PLAY C 4 A_Recoil (-0.84)
		TNT1 A 0 ThrustThing (angle*256/360-38.7, 7, 0, 0)
		PLAY D 4 A_Recoil (-0.84)
		TNT1 A 0 A_Jump (256, "TurnAndAcquireTargetWhileWander")
		Stop

	WanderForwardAndRight: // N
		TNT1 A 0 ThrustThing (angle*256/360+38.7, 7, 0, 0)
		PLAY A 4 A_Recoil (-0.84)
		TNT1 A 0 ThrustThing (angle*256/360+38.7, 7, 0, 0)
		PLAY B 4 A_Recoil (-0.84)
		TNT1 A 0 ThrustThing (angle*256/360+38.7, 7, 0, 0)
		PLAY C 4 A_Recoil (-0.84)
		TNT1 A 0 ThrustThing (angle*256/360+38.7, 7, 0, 0)
		PLAY D 4 A_Recoil (-0.84)
		TNT1 A 0 A_Jump (256, "TurnAndAcquireTargetWhileWander")
		Stop

	TurnAndAcquireTargetWhileWander: // Y
		TNT1 AAAAAAAAAAAAAAAA 0 A_Wander
		TNT1 A 0 A_LookEx (0, 0, 0, 1200, 0, "CheckIfTargetInLOS")
		TNT1 A 0 A_Jump (256, "CheckIfStuckWhileWander")
		Stop

//-----------------------------------------------------------------------

	CheckIfStuckWhileWander: // Y
		TNT1 A 0 A_JumpIf (momx != 0 || momy != 0, "NotStuckWhileWander")
		TNT1 A 0 A_Jump (256, "StuckWhileWander")
		Stop

	NotStuckWhileWander: // Y
		TNT1 A 0 A_JumpIfInventory ("MoveBackwardsThreshold", 0, "CheckIfUnderwaterWhileWander")
		TNT1 A 0 A_TakeInventory ("MoveBackwardsThreshold", 1)
		TNT1 A 0 A_Jump (256, "CheckIfUnderwaterWhileWander")
		Stop

	StuckWhileWander: // Y
		TNT1 A 0 A_JumpIf (momx == 0 && momy == 0, "AddToMoveBackWardsThresholdTimerWhileWander")
		TNT1 A 0 A_Jump (256, "CheckIfUnderwaterWhileWander")
		Stop

//-----------------------------------------------------------------------

	CheckIfUnderwaterWhileWander: // Y
		TNT1 A 0 A_JumpIf (waterlevel == 1, "SwimWhileWander1")
		TNT1 A 0 A_JumpIf (waterlevel == 2, "SwimWhileWander2")
		TNT1 A 0 A_JumpIf (waterlevel == 3, "SwimWhileWander3")
		TNT1 A 0 A_Jump (256, "AlternateWander")
		Stop

	SwimWhileWander1: // Y
		TNT1 A 0 A_JumpIf (z - floorz == 0, 2)
		TNT1 A 0 ThrustThingZ (0, 8, 0, 1)
		PLA6 A 0 // ADDED DUMMY
		TNT1 A 0 A_Jump (256, "AlternateWander")
		Stop

	SwimWhileWander2: // Y
		TNT1 A 0 ThrustThingZ (0, 16, 0, 1)
		TNT1 A 0 A_Jump (256, "AlternateWander")
		Stop

	SwimWhileWander3: // Y
		TNT1 A 0 ThrustThingZ (0, 32, 0, 1)
		TNT1 A 0 A_Jump (256, "AlternateWander")
		Stop

//-----------------------------------------------------------------------

	AddToMoveBackWardsThresholdTimerWhileWander: // Y
		TNT1 A 0 A_GiveInventory ("MoveBackwardsThreshold", 1)
		TNT1 A 0 A_Jump (256, "CheckMoveBackWardsThresholdTimerWhileWander")
		Stop

	CheckMoveBackWardsThresholdTimerWhileWander: // Y
		TNT1 A 0 A_JumpIfInventory ("MoveBackwardsThreshold", 1, "ClearMoveBackWardsThresholdTimerWhileWander")
		TNT1 A 0 A_Jump (256, "CheckIfUnderwaterWhileWander")
		Stop

	ClearMoveBackWardsThresholdTimerWhileWander: // Y
		TNT1 A 0 A_TakeInventory ("MoveBackwardsThreshold", 1)
		TNT1 A 0 A_Jump (256, "MoveBackwardsAlternateWhileWander")
		Stop

//-----------------------------------------------------------------------

	MoveBackwardsAlternateWhileWander: // Y
		TNT1 A 0 A_Jump (256, "MoveBackwardsWhileWander", "MoveBackwardsAndLeftWhileWander", "MoveBackwardsAndRightWhileWander")
		Stop

	MoveBackwardsWhileWander: // N
		PLAY A 4 A_Recoil (6.125)
		PLAY B 4 A_Recoil (6.125)
		PLAY C 4 A_Recoil (6.125)
		PLAY D 4 A_Recoil (6.125)
		TNT1 A 0 A_Jump (random(128, 256), "AlternateWander")
		Loop

	MoveBackwardsAndLeftWhileWander: // N
		PLAY A 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360+166.7, 7, 0, 0)
		PLAY B 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360+166.7, 7, 0, 0)
		PLAY C 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360+166.7, 7, 0, 0)
		PLAY D 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360+166.7, 7, 0, 0)
		TNT1 A 0 A_Jump (random(128, 256), "AlternateWander")
		Loop

	MoveBackwardsAndRightWhileWander: // N
		PLAY A 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360-166.7, 7, 0, 0)
		PLAY B 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360-166.7, 7, 0, 0)
		PLAY C 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360-166.7, 7, 0, 0)
		PLAY C 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360-166.7, 7, 0, 0)
		TNT1 A 0 A_Jump (random(128, 256), "AlternateWander")
		loop


//-----------------------------------------------------------------------
//
//			Back off from target and missile states.
//
//-----------------------------------------------------------------------

	AlternateBackOff: // Y
	// Same formula as in the chase states, but only backwards movement and different jumps.
		TNT1 A 0 A_Jump (256, "BackOffBackwards", "BackOffBackwardsAndLeft", "BackOffBackwardsAndRight")
		Stop

	BackOffBackwards: // N
		TNT1 A 0 A_FaceTarget
		PLAY A 4 A_Recoil (6.125)
		PLAY B 4 A_Recoil (6.125)
		PLAY C 4 A_Recoil (6.125)
		PLAY D 4 A_Recoil (6.125)
		TNT1 A 0 A_JumpIf (health <= 50, "Missile") // A bit desperate.
		TNT1 A 0 A_Jump (random(128, 256), 1)
		Loop
		TNT1 A 0 A_MonsterRefire (10, "ResetTimers")
		TNT1 A 0 A_Jump (256, "Missile")
		Stop

	BackOffBackwardsAndLeft: // N
		TNT1 A 0 A_FaceTarget
		PLAY A 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360+166.7, 7, 0, 0)
		PLAY B 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360+166.7, 7, 0, 0)
		PLAY C 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360+166.7, 7, 0, 0)
		PLAY D 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360+166.7, 7, 0, 0)
		TNT1 A 0 A_JumpIf (health <= 50, "Missile")
		TNT1 A 0 A_Jump (random(128, 256), 1)
		Loop
		TNT1 A 0 A_MonsterRefire (10, "ResetTimers")
		TNT1 A 0 A_Jump (256, "Missile")
		Stop

	BackOffBackwardsAndRight: // N
		TNT1 A 0 A_FaceTarget
		PLAY A 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360-166.7, 7, 0, 0)
		PLAY B 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360-166.7, 7, 0, 0)
		PLAY C 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360-166.7, 7, 0, 0)
		PLAY D 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360-166.7, 7, 0, 0)
		TNT1 A 0 A_JumpIf (health <= 50, "Missile")
		TNT1 A 0 A_Jump (random(128, 256), 1)
		Loop
		PLA6 D 0 A_MonsterRefire (10, "ResetTimers")
		TNT1 A 0 A_Jump (256, "Missile")
		Stop

//-----------------------------------------------------------------------

	Missile: // N
		TNT1 A 0 //Dummy frame needed.
		TNT1 A 0 A_Jump (256, "ResetTimers")
		Stop


//-----------------------------------------------------------------------
//
//				Pain, death and respawn states.
//
//-----------------------------------------------------------------------

	Pain.FireSpecial: // Y All
		TNT1 A 0 A_Jump (256, "DisablePushablePreAlternatePainBackOff")
		Stop
	Pain.Fire:
		TNT1 A 0 ACS_ExecuteAlways (SC_DAMAGEOVERTIME, 0, OVERTIME_FIRE)
		TNT1 A 0 A_Jump (256, "DisablePushablePreAlternatePainBackOff")
		Stop
	Pain.ChemicalSpecial:
		TNT1 A 0 A_Jump (256, "DisablePushablePreAlternatePainBackOff")
		Stop
	Pain.Chemical:
		TNT1 A 0 ACS_ExecuteAlways (SC_DAMAGEOVERTIME, 0, OVERTIME_CHEM)
		TNT1 A 0 A_Jump (256, "DisablePushablePreAlternatePainBackOff")
		Stop
	Pain:
		TNT1 A 0 A_Jump (256, "DisablePushablePreAlternatePainBackOff")
		Stop
		
	DisablePushablePreAlternatePainBackOff: // Y
	// If woken up by getting hurt, clear the +PUSHABLE flag.
		TNT1 A 0 A_ChangeFlag ("PUSHABLE", 0)
		TNT1 A 0 A_Jump (256, "AlternatePainBackOff")
		Stop

//-----------------------------------------------------------------------

	AlternatePainBackOff: // Y
		TNT1 A 0 A_Jump (256, "PainBackOffBackwards", "PainBackOffBackwardsAndLeft", "PainBackOffBackwardsAndRight")
		Stop

	PainBackOffBackwards: // N
		TNT1 A 0 A_FaceTarget
		PLAY G 4 A_Recoil (6.125)
		TNT1 A 0 A_Pain
		PLAY G 4 A_Recoil (6.125)
		TNT1 A 0 A_Jump (256, "CheckIfTargetInLOS") //Try to attack right back if possible.
		Stop

	PainBackOffBackwardsAndLeft: // N
		TNT1 A 0 A_FaceTarget
		PLAY G 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360+166.7, 7, 0, 0)
		TNT1 A 0 A_Pain
		PLAY G 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360+166.7, 7, 0, 0)
		TNT1 A 0 A_Jump (256, "CheckIfTargetInLOS")
		Stop

	PainBackOffBackwardsAndRight: // N
		TNT1 A 0 A_FaceTarget
		PLAY G 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360-166.7, 7, 0, 0)
		TNT1 A 0 A_Pain
		PLAY G 4 A_Recoil (0.84)
		TNT1 A 0 ThrustThing (angle*256/360-166.7, 7, 0, 0)
		TNT1 A 0 A_Jump (256, "CheckIfTargetInLOS")
		Stop

//-----------------------------------------------------------------------
// Y for All below this line

	Death:
		"####" H 0 A_StopSound (0) "####" H 0 A_StopSound (4)
		"####" H 0 A_StopSound (1) "####" H 0 A_StopSound (5)
		"####" H 0 A_StopSound (2) "####" H 0 A_StopSound (6)
		"####" H 0 A_StopSound (3) "####" H 0 A_StopSound (7)
		"####" H 1 A_Scream
		"####" I 6
		"####" J 6 A_NoBlocking
		"####" JJJ 0 A_SpawnItemEx ("Credits1",random(-4,4),random(-4,4),random(32,48),random(2,4),random(-2,2),random(2,4),0,0,128)
		"####" J 0 A_SpawnItemEx ("PowerupCrate",random(-4,4),random(-4,4),random(32,48),random(2,4),random(-2,2),random(2,4),0,0,230)
		"####" K 6
		"####" L 6 A_PlaySound ("misc/thud")
		"####" M 6
		"####" N -1
		Stop

	XDeath:
		"####" O 0 A_StopSound (0) "####" O 0 A_StopSound (4)
		"####" O 0 A_StopSound (1) "####" O 0 A_StopSound (5)
		"####" O 0 A_StopSound (2) "####" O 0 A_StopSound (6)
		"####" O 0 A_StopSound (3) "####" O 0 A_StopSound (7)
		"####" O 4
		"####" P 0 A_NoBlocking
		"####" PPP 0 A_SpawnItemEx("Credits1",random(-4,4),random(-4,4),random(32,48),random(-4,4),random(-4,4),random(4,8),0,0,128)
		"####" P 0 A_SpawnItemEx("PowerupCrate",random(-4,4),random(-4,4),random(32,48),random(2,4),random(-2,2),random(2,4),0,0,230)
		"####" P 0 A_Scream
		"####" P 0 A_PlaySound ("misc/gib", 7)
		"####" P 0 A_PlaySound ("misc/gib", 6)
		"####" P 4 A_SpawnItemEx ("MarineGoreExplosion")
		"####" Q 4 A_SpawnItemEx ("MarineGoreExplosion2")
		"####" R 4 A_SpawnItemEx ("MarineGoreExplosion3")
		"####" STUV 4
		"####" W -1
		stop

	Death.MassDriver:
	Death.AntiArmor:
	Death.Explosion:
		"####" H 0 ThrustThing (angle*256/360+(random(0,192)), random(20,40), 1, 0)
		"####" H 1 ThrustThingZ (0,45,0,0)
		"####" H 0 A_Jump (128,"Death")
		TNT1 A 0 A_Jump (256, "XDeath")
		Stop

	Death.FireSpecial:
	Death.Fire:
		// stop all sound channels
		"####" H 0 A_StopSound (0) "####" H 0 A_StopSound (4)
		"####" H 0 A_StopSound (1) "####" H 0 A_StopSound (5)
		"####" H 0 A_StopSound (2) "####" H 0 A_StopSound (6)
		"####" H 0 A_StopSound (3) "####" H 0 A_StopSound (7)
		"####" H 0 A_SpawnItemEx ("BurningCorpse",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0)
		"####" H 0 A_NoBlocking
		"####" N -1 A_SetTranslucent(0.0,0)
		stop

	Death.ChemicalSpecial:
	Death.Chemical:
		// stop all sound channels
		"####" H 0 A_StopSound (0) "####" H 0 A_StopSound (4)
		"####" H 0 A_StopSound (1) "####" H 0 A_StopSound (5)
		"####" H 0 A_StopSound (2) "####" H 0 A_StopSound (6)
		"####" H 0 A_StopSound (3) "####" H 0 A_StopSound (7)
		"####" H 0 A_SpawnItemEx ("ChemicalCorpse",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0)
		"####" H 0 A_NoBlocking
		"####" N -1 A_SetTranslucent(0.0,0)
		stop

	Death.Energy:
		// stop all sound channels
		"####" H 0 A_StopSound (0) "####" H 0 A_StopSound (4)
		"####" H 0 A_StopSound (1) "####" H 0 A_StopSound (5)
		"####" H 0 A_StopSound (2) "####" H 0 A_StopSound (6)
		"####" H 0 A_StopSound (3) "####" H 0 A_StopSound (7)
		"####" H 0 A_PlaySound ("sndz/disintegr")
		"####" HHH 0 A_SpawnItemEx("Credits1",random(-4,4),random(-4,4),random(32,48),random(-4,4),random(-4,4),random(4,8),0,0,128)
		"####" H 0 A_SpawnItemEx("PowerupCrate",random(-4,4),random(-4,4),random(32,48),random(2,4),random(-2,2),random(2,4),0,0,230)
		"####" H 0 A_SpawnItemEx ("DisintegratedCorpse",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0)
		"####" H 0 A_NoBlocking
		"####" N -1 A_SetTranslucent(0.0,0)
		stop

	Death.Time:
		// stop all sound channels
		"####" G 0 A_Stop
		"####" G 0 A_NoGravity
		"####" G 0 A_StopSound (0) "####" G 0 A_StopSound (4)
		"####" G 0 A_StopSound (1) "####" G 0 A_StopSound (5)
		"####" G 0 A_StopSound (2) "####" G 0 A_StopSound (6)
		"####" G 0 A_StopSound (3) "####" G 0 A_StopSound (7)
		"####" G 0 A_PlaySound("weapons/timedeath")
		"####" GGG 0 A_SpawnItemEx("Credits1",random(-4,4),random(-4,4),random(32,48),random(-4,4),random(-4,4),random(4,8),0,0,128)
		"####" G 0 A_SpawnItemEx("PowerupCrate",random(-4,4),random(-4,4),random(32,48),random(2,4),random(-2,2),random(2,4),0,0,230)
		"####" G 0 A_NoBlocking
		"####" GGGGGGGGGGGGGGGGGGGG 2 A_FadeOut(0.05)
		"####" G -1 A_SetTranslucent(0.0,0)
		stop

	Dismiss:
		TNT1 A 0 A_SpawnItemEx ("TeleportFog", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION)
		stop

//-----------------------------------------------------------------------
// Are these ever used?

	DeathWaitPreTryToRespawn:
		"####" N 12
		"####" A 0 A_Jump (random(0, 256), "TryToRespawn")
		"####" A 0 A_Jump (256, "DeathWaitPreTryToRespawn")
		Stop

	XDeathWaitPreTryToRespawn:
		"####" W 12
		"####" A 0 A_Jump (random(0, 256), "TryToRespawn")
		"####" A 0 A_Jump (256, "XDeathWaitPreTryToRespawn")
		Stop


	TryToRespawn: //Try to to respawn every 2 seconds.
		TNT1 A 0 A_Respawn (1 | 4)
		TNT1 A 70
		Loop


//-----------------------------------------------------------------------
//
//						Timer states.
//
//-----------------------------------------------------------------------

	AddToTimers:
		TNT1 A 0 A_GiveInventory ("ClearTarget", 1)
		TNT1 A 0 A_CheckSight ("AddToNoPlayerInSightTimer")
	// No point in adding a counter if the player has been out of sight for only a few frames.
		
		TNT1 A 0 A_JumpIfInventory ("NoPlayerInSight", 0, "CheckTimers")
		TNT1 A 0 A_TakeInventory ("NoPlayerInSight", 128)
		// If player in sight, clear this timer. Otherwise, the marine will sometimes suddenly stop and start idling when you go around a corner.
		TNT1 A 0 A_Jump (256, "CheckTimers")
		Stop
	// These two act as one state.
	AddToNoPlayerInSightTimer:
		TNT1 A 0 A_GiveInventory ("NoPlayerInSight", 1)
		TNT1 A 0 A_Jump (256, "CheckTimers")
		Stop

	CheckTimers:
		TNT1 A 0 A_JumpIfInventory ("ClearTarget", 1, "ClearTarget")
		TNT1 A 0 A_JumpIfInventory ("NoPlayerInSight", 128, "CheckIfPlayerInSight")
		TNT1 A 0 A_Jump (256, "AlternateChase")
		Stop

	ClearTarget:
		TNT1 A 0 A_TakeInventory ("ClearTarget", 1)
		TNT1 A 0 A_ClearTarget
		TNT1 A 0 A_Jump (256, "CheckTimers")
		Stop // In case both of the timers have been reached, check again so that the other one will reset as well.

	CheckIfPlayerInSight:
		TNT1 A 0 A_TakeInventory ("NoPlayerInSight", 128)
		TNT1 A 0 A_CheckSight ("EnablePushablePreIdle")
		TNT1 A 0 A_Jump (256, "CheckTimers")
		Stop

//-----------------------------------------------------------------------

	ResetTimers: //This is ONLY connected to "See", "Missile" and "Pain" states. Reset timers so that the marines don't all of sudden decide to idle in the middle of a battle.
		TNT1 A 0 A_JumpIfInventory ("ClearTarget", 0, 4)
		TNT1 A 0 A_TakeInventory ("ClearTarget", 2)
		TNT1 A 0 A_JumpIfInventory ("NoPlayerInSight", 0, 2)
		TNT1 A 0 A_TakeInventory ("NoPlayerInSight", 128)
		TNT1 A 0 A_Jump (256, "AlternateChase")
		Stop
	}
}

Actor RedTiberiumRifleman	//Red Tiberium Rifleman
{

	Speed 0					//ThrustThing and A_Recoil instead.
	MaxDropOffHeight 64		//Gives the marines a smaller chance of falling into pits. 63, not 64.
	PainSound "*pain"
	MaxStepHeight 56
//-----------------------------------------------------------------------
	obituary "$OB_MARINE_TIBRIFLE_RED"
	Health 115
	Radius 16
	Height 56
	Mass 100
	Painchance 200

	+CANPASS
	+CANPUSHWALLS
	+CANUSEWALLS
	+FLOORCLIP
	+WINDTHRUST
	+NOBLOCKMONST
	+SOLID
	+SHOOTABLE
	+QUICKTORETALIATE
	+NODROPOFF				//In conjunction with MaxDropOffHeight.
	+ISMONSTER				//Needed for the marines to take any projectile damage in invasion mode.
	-COUNTKILL				//In conjunction with +ISMONSTER.
	+NEVERFAST				//Same as above.
	//+NOTIMEFREEZE
	+LOOKALLAROUND
	-TELESTOMP
	deathsound "generic/death"

	Translation "112:127=[160,0,0]:[0,0,0]"

//AOW Base DamageFactoring-----------------------------------------------------------------------

	DesignatedTeam 1
	damagefactor "Fist", 1.0
	damagefactor "Bullet", 1.0
	damagefactor "Rifle", 1.0
	damagefactor "Explosion", 0.3
	damagefactor "Fire", 1.0
	damagefactor "Chemical", 2.0
	damagefactor "ChemicalSpecial", 0.0
	damagefactor "Energy", 1.0
	damagefactor "AntiArmor", 0.1
	damagefactor "Time", 1.0
	damagefactor "Disarm", 0.0
	damagefactor "Deconstruction", 0.0
	damagefactor "MassDriver", 0.3	
	damagefactor "Mechstomp", 0.0
	damagefactor "Monster", 1.0
//-----------------------------------------------------------------------


	States //Sorry about the ridiculously long state names.
	{

//-----------------------------------------------------------------------
//
//					Spawn and idle states.
//
//-----------------------------------------------------------------------


	Spawn:
		MGMR A 0 //Dummy frame needed.
		MGMR A 0 A_GiveInventory("IsRed", 1)
		MGMR A 0 A_ChangeFlag("Friendly", 0)//Execute ACS script(s) here.
		MGMR A 0 ACS_ExecuteAlways (985, 0, 1, ARMOD_CHEM)
		MGMR A 0 ACS_ExecuteAlways (SC_MARINE_INIT, 0)
		Goto EnablePushablePreIdle

	EnablePushablePreIdle: //Allows you to push marines if they are in your way while idling.
		MGMR A 0 A_ChangeFlag ("PUSHABLE", 1)
		//MGMR A 0 A_Jump (256, "Idle")
		Goto Idle

	Idle: //Check if pushed, then look for enemies. If Player out of sight, begin to wander. If underwater, sink down.
		MGMR A 0 A_JumpIf (momx != 0 || momy != 0, "MomentumCheck")

		MGMR A 1 A_LookEx (0, 0, 0, 1200, 360, "DisablePushablePreAlternateChase")
		MGMR A 0 A_CheckSight ("DisablePushablePreAlternateWander")

		MGMR A 0 A_JumpIf (z - floorz == 0, 4) //If non-deep water or at bottom, don't sink.
		MGMR A 0 A_JumpIf (waterlevel == 1, "SinkDown1")
		MGMR A 0 A_JumpIf (waterlevel == 2, "SinkDown2")
		MGMR A 0 A_JumpIf (waterlevel == 3, "SinkDown3")
		MGMR A 0
		MGMR A 0 //A_Jump (256, "Idle")
		Loop


//-----------------------------------------------------------------------


	MomentumCheck:
		MGMR A 0 A_JumpIf (momx == 0 && momy == 0, "Idle")
		MGMR A 4
		MGMR A 0 A_JumpIf (momx == 0 && momy == 0, "Idle")
		MGMR B 4
		MGMR B 0 A_JumpIf (momx == 0 && momy == 0, "Idle")
		MGMR C 4
		MGMR C 0 A_JumpIf (momx == 0 && momy == 0, "Idle")
		MGMR D 4
		//MGMR D 0 A_Jump (256, "CheckIfAnyTargetsWhilePushed")
		Goto CheckIfAnyTargetsWhilePushed


	CheckIfAnyTargetsWhilePushed: //Look for potential targets while being pushed.
		MGMR A 0 A_LookEx (0, 0, 0, 1200, 0, "DisablePushablePreAlternateChase")
		//MGMR A 0 A_Jump (256, "Idle")
		Goto Idle


//-----------------------------------------------------------------------


	SinkDown1: //Ankle deep.
		MGMR A 0 ThrustThingZ (0, 2, 1, 1)
		//MGMR A 0 A_Jump (256, "Idle")
		Goto Idle

	SinkDown2: //Waist deep.
		MGMR A 0 ThrustThingZ (0, 1, 1, 1)
		//MGMR A 0 A_Jump (256, "Idle")
		Goto Idle

	SinkDown3: //Cmpletely underwater. Slower sinking.
		MGMR A 0 ThrustThingZ (0, 2, 1, 0)
		//MGMR A 0 A_Jump (256, "Idle")
		Goto Idle








//-----------------------------------------------------------------------
//
//	Chase, check target, check if stuck/underwater and back off states.
//
//-----------------------------------------------------------------------


	See: //Simply for A_SpidRefire. Goes to "ResetTimers".
		MGMR A 0 //Dummy frame needed.
		//MGMR A 0 A_Jump (256, "ResetTimers")
		Goto ResetTimers

	DisablePushablePreAlternateChase:
		MGMR A 0 A_ChangeFlag ("PUSHABLE", 0)
		//MGMR A 0 A_Jump (256, "AlternateChase")
		Goto AlternateChase

	AlternateChase:
		MGMR A 0 A_Jump (85, "ChaseForwardAndLeft", "ChaseForwardAndRight") //1/3 chance of straferunning.
		//MGMR A 0 A_Jump (256, "ChaseForward")
		Goto ChaseForward


	ChaseForward:
		MGMR A 4 A_Recoil (-3.675)
		MGMR B 4 A_Recoil (-3.675)
		MGMR C 4 A_Recoil (-3.675)
		MGMR D 4 A_Recoil (-3.675)
		//MGMR D 0 A_Jump (256, "TurnAndAcquireTargetWhileChase")
		Goto TurnAndAcquireTargetWhileChase

	ChaseForwardAndLeft: //Straferunning 28% faster.
		MGMR A 0 ThrustThing (angle*256/360-38.7, 4, 0, 0)
		MGMR A 4 A_Recoil (-0.504)
		MGMR A 0 ThrustThing (angle*256/360-38.7, 4, 0, 0)
		MGMR B 4 A_Recoil (-0.504)
		MGMR B 0 ThrustThing (angle*256/360-38.7, 4, 0, 0)
		MGMR C 4 A_Recoil (-0.504)
		MGMR C 0 ThrustThing (angle*256/360-38.7, 4, 0, 0)
		MGMR D 4 A_Recoil (-0.504)
		//MGMR D 0 A_Jump (256, "TurnAndAcquireTargetWhileChase")
		Goto TurnAndAcquireTargetWhileChase

	ChaseForwardAndRight:
		MGMR A 0 ThrustThing (angle*256/360+38.7, 4, 0, 0)
		MGMR A 4 A_Recoil (-0.504)
		MGMR A 0 ThrustThing (angle*256/360+38.7, 4, 0, 0)
		MGMR B 4 A_Recoil (-0.504)
		MGMR B 0 ThrustThing (angle*256/360+38.7, 4, 0, 0)
		MGMR C 4 A_Recoil (-0.504)
		MGMR C 0 ThrustThing (angle*256/360+38.7, 4, 0, 0)
		MGMR D 4 A_Recoil (-0.504)
		//MGMR D 0 A_Jump (256, "TurnAndAcquireTargetWhileChase")
		Goto TurnAndAcquireTargetWhileChase


	TurnAndAcquireTargetWhileChase: //Allows for marines to turn and acquire targets.
		MGMR AAAAAAAAAAAAAAAA 0 A_Chase ("", "")
		//MGMR A 0 A_Jump (256, "CheckIfTargetInLOS")
		Goto CheckIfTargetInLOS

	CheckIfTargetInLOS: //Every MGMR A frames allows for attack or backing off. This is to make the marines animate properly.
		MGMR A 0 A_JumpIfTargetInLOS ("TargetInLOS")
		//MGMR A 0 A_Jump (256, "CheckIfStuck")
		Goto CheckIfStuck

	TargetInLOS:
		MGMR A 0 A_JumpIf (health <= 39, 3) //If 39 health or lower, get more aggressive.
		MGMR A 0 A_JumpIfCloser (256, "AlternateBackOff") //The threshold of when to back off.
		MGMR A 0 A_Jump (random(0, 256), "CheckIfStuck") //Makes the marines less inhuman.
		MGMR A 0 A_JumpIfCloser (4096, "Missile") //Max target range.
		//MGMR A 0 A_Jump (256, "CheckIfStuck")
		Goto CheckIfStuck


//-----------------------------------------------------------------------


	CheckIfStuck: //This state act as a "dynamic threshold timer". Checks if there is any momentum along the x- and y- axis. If false, add to the threshold timer. If true, clear the threshold timer and check if underwater instead.
		MGMR A 0 A_JumpIf (momx != 0 || momy != 0, "NotStuck")
		//MGMR A 0 A_Jump (256, "Stuck")
		Goto Stuck

	NotStuck:
		MGMR A 0 A_JumpIfInventory ("MoveBackwardsThreshold", 0, "CheckIfUnderwater")
		MGMR A 0 A_TakeInventory ("MoveBackwardsThreshold", 1)
		//MGMR A 0 A_Jump (256, "CheckIfUnderwater")
		Goto CheckIfUnderwater

	Stuck:
		MGMR A 0 A_JumpIf (momx == 0 && momy == 0, "AddToMoveBackWardsThresholdTimer")
		//MGMR A 0 A_Jump (256, "CheckIfUnderwater")
		Goto CheckIfUnderwater


//-----------------------------------------------------------------------


	CheckIfUnderWater:
		MGMR A 0 A_JumpIf (waterlevel == 1, "Swim1")
		MGMR A 0 A_JumpIf (waterlevel == 2, "Swim2")
		MGMR A 0 A_JumpIf (waterlevel == 3, "Swim3")
		//MGMR A 0 A_Jump (256, "AddToTimers") //If not underwater, add to the regular timers instead.
		Goto AddToTimers


	Swim1:
		MGMR A 0 A_JumpIf (z - floorz == 0, 2) //If non-deep water, don't swim.
		MGMR A 0 ThrustThingZ (0, 8, 0, 1) //Simulates jumping/swimming in water.
		MGMR A 0
		//MGMR A 0 A_Jump (256, "AddToTimers")
		Goto AddToTimers

	Swim2:
		MGMR A 0 ThrustThingZ (0, 16, 0, 1)
		//MGMR A 0 A_Jump (256, "AddToTimers")
		Goto AddToTimers

	Swim3:
		MGMR A 0 ThrustThingZ (0, 32, 0, 1)
		//MGMR A 0 A_Jump (256, "AddToTimers")
		Goto AddToTimers


//-----------------------------------------------------------------------


	AddToMoveBackWardsThresholdTimer:
		MGMR A 0 A_GiveInventory ("MoveBackwardsThreshold", 1)
		//MGMR A 0 A_Jump (256, "CheckMoveBackWardsThresholdTimer")
		Goto CheckMoveBackWardsThresholdTimer

	CheckMoveBackWardsThresholdTimer:
		MGMR A 0 A_JumpIfInventory ("MoveBackwardsThreshold", 1, "ClearMoveBackWardsThresholdTimer")
		//MGMR A 0 A_Jump (256, "CheckIfUnderwater")
		Goto CheckIfUnderwater

	ClearMoveBackWardsThresholdTimer:
		MGMR A 0 A_TakeInventory ("MoveBackwardsThreshold", 1)
		//MGMR A 0 A_Jump (256, "MoveBackwardsAlternate")
		Goto MoveBackwardsAlternate


//-----------------------------------------------------------------------


	MoveBackwardsAlternate: //Same "A_Recoil" and "ThrustThing" values as in "BackOff" states, but with jumps to a different state.
		MGMR A 0 A_Jump (256, 1,2,3)
		MGMR A 0
		Goto MoveBackwards
		MGMR A 0
		Goto MoveBackwardsAndLeft
		MGMR A 0
		Goto MoveBackwardsAndRight


	MoveBackwards:
		MGMR A 4 A_Recoil (3.675)
		MGMR B 4 A_Recoil (3.675)
		MGMR C 4 A_Recoil (3.675)
		MGMR D 4 A_Recoil (3.675)
		MGMR D 0 A_Jump (random(128, 256), 1)
		//MGMR D 0 A_Jump (256, "MoveBackwards")
		Goto MoveBackwards
		MGMR D 0
		//MGMR D 0 A_Jump (256, "AddToTimers")
		Goto AddToTimers

	MoveBackwardsAndLeft:
		MGMR A 4 A_Recoil (0.504)
		MGMR A 0 ThrustThing (angle*256/360+166.7, 4, 0, 0)
		MGMR B 4 A_Recoil (0.504)
		MGMR B 0 ThrustThing (angle*256/360+166.7, 4, 0, 0)
		MGMR C 4 A_Recoil (0.504)
		MGMR C 0 ThrustThing (angle*256/360+166.7, 4, 0, 0)
		MGMR D 4 A_Recoil (0.504)
		MGMR D 0 ThrustThing (angle*256/360+166.7, 4, 0, 0)
		MGMR D 0 A_Jump (random(128, 256), 1)
		//MGMR D 0 A_Jump (256, "MoveBackwardsAndLeft")
		Goto MoveBackwardsAndLeft
		MGMR D 0
		//MGMR D 0 A_Jump (256, "AddToTimers")
		Goto AddToTimers

	MoveBackwardsAndRight:
		MGMR A 4 A_Recoil (0.504)
		MGMR A 0 ThrustThing (angle*256/360-166.7, 4, 0, 0)
		MGMR B 4 A_Recoil (0.504)
		MGMR B 0 ThrustThing (angle*256/360-166.7, 4, 0, 0)
		MGMR C 4 A_Recoil (0.504)
		MGMR C 0 ThrustThing (angle*256/360-166.7, 4, 0, 0)
		MGMR D 4 A_Recoil (0.504)
		MGMR D 0 ThrustThing (angle*256/360-166.7, 4, 0, 0)
		MGMR D 0 A_Jump (random(128, 256), 1)
		//MGMR D 0 A_Jump (256, "MoveBackwardsAndRight")
		Goto MoveBackwardsAndRight
		MGMR D 0
		//MGMR D 0 A_Jump (256, "AddToTimers")
		Goto AddToTimers








//-----------------------------------------------------------------------
//
//	Wander, check target, check if stuck/underwater and back off states.
//
//-----------------------------------------------------------------------


	DisablePushablePreAlternateWander: //Nearly identical to chase states.
		MGMR A 0 A_ChangeFlag ("PUSHABLE", 0)
		//MGMR A 0 A_Jump (256, "AlternateWander")
		Goto AlternateWander

	AlternateWander:
		MGMR A 0 A_Jump (85, "WanderForwardAndLeft", "WanderForwardAndRight")
		//MGMR A 0 A_Jump (256, "WanderForward")
		Goto WanderForward

	WanderForward:
		MGMR A 4 A_Recoil (-3.675)
		MGMR B 4 A_Recoil (-3.675)
		MGMR C 4 A_Recoil (-3.675)
		MGMR D 4 A_Recoil (-3.675)
		//MGMR D 0 A_Jump (256, "TurnAndAcquireTargetWhileWander")
		Goto TurnAndAcquireTargetWhileWander

	WanderForwardAndLeft:
		MGMR A 0 ThrustThing (angle*256/360-38.7, 4, 0, 0)
		MGMR A 4 A_Recoil (-0.504)
		MGMR A 0 ThrustThing (angle*256/360-38.7, 4, 0, 0)
		MGMR B 4 A_Recoil (-0.504)
		MGMR B 0 ThrustThing (angle*256/360-38.7, 4, 0, 0)
		MGMR C 4 A_Recoil (-0.504)
		MGMR C 0 ThrustThing (angle*256/360-38.7, 4, 0, 0)
		MGMR D 4 A_Recoil (-0.504)
		//MGMR D 0 A_Jump (256, "TurnAndAcquireTargetWhileWander")
		Goto TurnAndAcquireTargetWhileWander

	WanderForwardAndRight:
		MGMR A 0 ThrustThing (angle*256/360+38.7, 4, 0, 0)
		MGMR A 4 A_Recoil (-0.504)
		MGMR A 0 ThrustThing (angle*256/360+38.7, 4, 0, 0)
		MGMR B 4 A_Recoil (-0.504)
		MGMR B 0 ThrustThing (angle*256/360+38.7, 4, 0, 0)
		MGMR C 4 A_Recoil (-0.504)
		MGMR C 0 ThrustThing (angle*256/360+38.7, 4, 0, 0)
		MGMR D 4 A_Recoil (-0.504)
		//MGMR D 0 A_Jump (256, "TurnAndAcquireTargetWhileWander")
		Goto TurnAndAcquireTargetWhileWander


	TurnAndAcquireTargetWhileWander:
		MGMR AAAAAAAAAAAAAAAA 0 A_Wander
		MGMR A 0 A_LookEx (0, 0, 0, 1200, 0, "CheckIfTargetInLOS")
		//MGMR A 0 A_Jump (256, "CheckIfStuckWhileWander")
		Goto CheckIfStuckWhileWander


//-----------------------------------------------------------------------


	CheckIfStuckWhileWander:
		MGMR A 0 A_JumpIf (momx != 0 || momy != 0, "NotStuckWhileWander")
		//MGMR A 0 A_Jump (256, "StuckWhileWander")
		Goto StuckWhileWander

	NotStuckWhileWander:
		MGMR A 0 A_JumpIfInventory ("MoveBackwardsThreshold", 0, "CheckIfUnderwaterWhileWander")
		MGMR A 0 A_TakeInventory ("MoveBackwardsThreshold", 1)
		//MGMR A 0 A_Jump (256, "CheckIfUnderwaterWhileWander")
		Goto CheckIfUnderwaterWhileWander

	StuckWhileWander:
		MGMR A 0 A_JumpIf (momx == 0 && momy == 0, "AddToMoveBackWardsThresholdTimerWhileWander")
		//MGMR A 0 A_Jump (256, "CheckIfUnderwaterWhileWander")
		Goto CheckIfUnderwaterWhileWander


//-----------------------------------------------------------------------


	CheckIfUnderwaterWhileWander:
		MGMR A 0 A_JumpIf (waterlevel == 1, "SwimWhileWander1")
		MGMR A 0 A_JumpIf (waterlevel == 2, "SwimWhileWander2")
		MGMR A 0 A_JumpIf (waterlevel == 3, "SwimWhileWander3")
		//MGMR A 0 A_Jump (256, "AlternateWander")
		Goto AlternateWander


	SwimWhileWander1:
		MGMR A 0 A_JumpIf (z - floorz == 0, 2)
		MGMR A 0 ThrustThingZ (0, 8, 0, 1)
		MGMR A 0
		//MGMR A 0 A_Jump (256, "AlternateWander")
		Goto AlternateWander

	SwimWhileWander2:
		MGMR A 0 ThrustThingZ (0, 16, 0, 1)
		//MGMR A 0 A_Jump (256, "AlternateWander")
		Goto AlternateWander

	SwimWhileWander3:
		MGMR A 0 ThrustThingZ (0, 32, 0, 1)
		//MGMR A 0 A_Jump (256, "AlternateWander")
		Goto AlternateWander


//-----------------------------------------------------------------------


	AddToMoveBackWardsThresholdTimerWhileWander:
		MGMR A 0 A_GiveInventory ("MoveBackwardsThreshold", 1)
		//MGMR A 0 A_Jump (256, "CheckMoveBackWardsThresholdTimerWhileWander")
		Goto CheckMoveBackWardsThresholdTimerWhileWander

	CheckMoveBackWardsThresholdTimerWhileWander:
		MGMR A 0 A_JumpIfInventory ("MoveBackwardsThreshold", 1, "ClearMoveBackWardsThresholdTimerWhileWander")
		//MGMR A 0 A_Jump (256, "CheckIfUnderwaterWhileWander")
		Goto CheckIfUnderwaterWhileWander

	ClearMoveBackWardsThresholdTimerWhileWander:
		MGMR A 0 A_TakeInventory ("MoveBackwardsThreshold", 1)
		//MGMR A 0 A_Jump (256, "MoveBackwardsAlternateWhileWander")
		Goto MoveBackwardsAlternateWhileWander


//-----------------------------------------------------------------------


	MoveBackwardsAlternateWhileWander:
		MGMR A 0 A_Jump (256, 1,2,3)
		MGMR A 0
		Goto MoveBackwardsWhileWander
		MGMR A 0
		Goto MoveBackwardsAndLeftWhileWander
		MGMR A 0
		Goto MoveBackwardsAndRightWhileWander


	MoveBackwardsWhileWander:
		MGMR A 4 A_Recoil (3.675)
		MGMR B 4 A_Recoil (3.675)
		MGMR C 4 A_Recoil (3.675)
		MGMR D 4 A_Recoil (3.675)
		MGMR D 0 A_Jump (random(128, 256), 1)
		//MGMR D 0 A_Jump (256, "MoveBackwardsWhileWander")
		Goto MoveBackwardsWhileWander
		MGMR A 0
		//MGMR A 0 A_Jump (256, "AlternateWander")
		Goto AlternateWander

	MoveBackwardsAndLeftWhileWander:
		MGMR A 4 A_Recoil (0.504)
		MGMR A 0 ThrustThing (angle*256/360+166.7, 4, 0, 0)
		MGMR B 4 A_Recoil (0.504)
		MGMR B 0 ThrustThing (angle*256/360+166.7, 4, 0, 0)
		MGMR C 4 A_Recoil (0.504)
		MGMR C 0 ThrustThing (angle*256/360+166.7, 4, 0, 0)
		MGMR D 4 A_Recoil (0.504)
		MGMR D 0 ThrustThing (angle*256/360+166.7, 4, 0, 0)
		MGMR D 0 A_Jump (random(128, 256), 1)
		//MGMR D 0 A_Jump (256, "MoveBackwardsAndLeftWhileWander")
		Goto MoveBackwardsAndLeftWhileWander
		MGMR D 0
		//MGMR D 0 A_Jump (256, "AlternateWander")
		Goto AlternateWander

	MoveBackwardsAndRightWhileWander:
		MGMR A 4 A_Recoil (0.504)
		MGMR A 0 ThrustThing (angle*256/360-166.7, 4, 0, 0)
		MGMR B 4 A_Recoil (0.504)
		MGMR B 0 ThrustThing (angle*256/360-166.7, 4, 0, 0)
		MGMR C 4 A_Recoil (0.504)
		MGMR C 0 ThrustThing (angle*256/360-166.7, 4, 0, 0)
		MGMR D 4 A_Recoil (0.504)
		MGMR D 0 ThrustThing (angle*256/360-166.7, 4, 0, 0)
		MGMR D 0 A_Jump (random(128, 256), 1)
		//MGMR D 0 A_Jump (256, "MoveBackwardsAndRightWhileWander")
		Goto MoveBackwardsAndRightWhileWander
		MGMR D 0
		//MGMR D 0 A_Jump (256, "AlternateWander")
		Goto AlternateWander








//-----------------------------------------------------------------------
//
//			Back off from target and missile states.
//
//-----------------------------------------------------------------------


	AlternateBackOff: //Same formula as in the chase states, but only backwards movement and different jumps.
		MGMR A 0 A_Jump (256, 1,2,3)
		MGMR A 0
		Goto BackOffBackwards
		MGMR A 0
		Goto BackOffBackwardsAndLeft
		MGMR A 0
		Goto BackOffBackwardsAndRight

	BackOffBackwards:
		MGMR A 0 A_FaceTarget
		MGMR A 4 A_Recoil (3.675)
		MGMR B 4 A_Recoil (3.675)
		MGMR C 4 A_Recoil (3.675)
		MGMR D 4 A_Recoil (3.675)
		MGMR D 0 A_JumpIf (health <= 50, "Missile") //A bit desperate.
		MGMR D 0 A_Jump (random(128, 256), 1)
		//MGMR D 0 A_Jump (256, "BackOffBackwards")
		Goto BackOffBackwards
		MGMR D 0 A_SpidRefire
		MGMR D 0 //A_Jump (256, "Missile")
		Goto Missile

	BackOffBackwardsAndLeft:
		MGMR A 0 A_FaceTarget
		MGMR A 4 A_Recoil (0.504)
		MGMR B 0 ThrustThing (angle*256/360+166.7, 4, 0, 0)
		MGMR B 4 A_Recoil (0.504)
		MGMR B 0 ThrustThing (angle*256/360+166.7, 4, 0, 0)
		MGMR C 4 A_Recoil (0.504)
		MGMR C 0 ThrustThing (angle*256/360+166.7, 4, 0, 0)
		MGMR D 4 A_Recoil (0.504)
		MGMR D 0 ThrustThing (angle*256/360+166.7, 4, 0, 0)
		MGMR D 0 A_JumpIf (health <= 50, "Missile")
		MGMR D 0 A_Jump (random(128, 256), 1)
		//MGMR D 0 A_Jump (256, "BackOffBackwardsAndLeft")
		Goto BackOffBackwardsAndLeft
		MGMR D 0 A_SpidRefire
		MGMR D 0 //A_Jump (256, "Missile")
		Goto Missile

	BackOffBackwardsAndRight:
		MGMR A 0 A_FaceTarget
		MGMR A 4 A_Recoil (0.504)
		MGMR A 0 ThrustThing (angle*256/360-166.7, 4, 0, 0)
		MGMR B 4 A_Recoil (0.504)
		MGMR B 0 ThrustThing (angle*256/360-166.7, 4, 0, 0)
		MGMR C 4 A_Recoil (0.504)
		MGMR C 0 ThrustThing (angle*256/360-166.7, 4, 0, 0)
		MGMR D 4 A_Recoil (0.504)
		MGMR D 0 ThrustThing (angle*256/360-166.7, 4, 0, 0)
		MGMR D 0 A_JumpIf (health <= 50, "Missile")
		MGMR D 0 A_Jump (random(128, 256), 1)
		//MGMR D 0 A_Jump (256, "BackOffBackwardsAndRight")
		Goto BackOffBackwardsAndRight
		MGMR D 0 A_SpidRefire
		MGMR D 0 //A_Jump (256, "Missile")
		Goto Missile


	Missile:
		MGMR E 0 A_JumpIfInventory("TiberiumRifleCooldown", 1, "AlternateChase")
		MGMR E 0 A_JumpIfInTargetInventory("IsRed", 1, "ClearTarget")
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 3, 2)
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 2, "ClearTarget")
		MGMR E 0 A_Jump (256, 1, 2)
		MGMR E 0
		Goto Missile2+1
		MGMR E 0
		Goto Missile3+1
	Missile2:
		MGMR E 0 A_Jump (random(64, 256), 1)
		Goto Missile3+1
		MGMR E 0 A_JumpIfInTargetInventory("IsRed", 1, "ClearTarget")
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 3, 2)
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 2, "ClearTarget")
		MGMR E 0 A_JumpIfInventory("TE21CallAmmoAI", 6, "Reload")
		MGMR E 0 A_FaceTarget
		//MGMR E 0 A_PlayWeaponSound("toxin/fire")
		MGMR E 0 A_CustomMissile("TiberiumDart", 36, 10, 2+random(-3,0))//1
		MGMR E 0 NoiseAlert (0, 0)
		MGMR E 0 A_GiveInventory("TE21CallAmmoAI")
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 Bright A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 Bright A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 Bright A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_JumpIfInTargetInventory("IsRed", 1, "ClearTarget")
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 3, 2)
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 2, "ClearTarget")
		MGMR E 0 A_JumpIfInventory("TE21CallAmmoAI", 6, "Reload")
		MGMR E 0 A_FaceTarget
		MGMR E 0 A_PlayWeaponSound("toxin/fire")
		MGMR E 0 A_CustomMissile("TiberiumDart", 36, 10, 2+random(-3,0))//2
		MGMR E 0 NoiseAlert (0, 0)
		MGMR E 0 A_GiveInventory("TE21CallAmmoAI")
		MGMR E 1 Bright A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 Bright A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 Bright A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 Bright A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_JumpIfInTargetInventory("IsRed", 1, "ClearTarget")
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 3, 2)
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 2, "ClearTarget")
		MGMR E 0 A_JumpIfInventory("TE21CallAmmoAI", 6, "Reload")
		MGMR E 0 A_FaceTarget
		MGMR E 0 A_PlayWeaponSound("toxin/fire")
		MGMR E 0 A_CustomMissile("TiberiumDart", 36, 10, 2+random(-3,0))//3
		MGMR E 0 NoiseAlert (0, 0)
		MGMR E 0 A_GiveInventory("TE21CallAmmoAI")
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_JumpIfInTargetInventory("IsRed", 1, "ClearTarget")
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 3, 2)
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 2, "ClearTarget")
		MGMR E 0 A_JumpIfInventory("TE21CallAmmoAI", 6, "Reload")
		MGMR E 0 A_FaceTarget
		MGMR E 0 A_PlayWeaponSound("toxin/fire")
		MGMR E 0 A_CustomMissile("TiberiumDart", 36, 10, 2+random(-3,0))//4
		MGMR E 0 NoiseAlert (0, 0)
		MGMR E 0 A_GiveInventory("TE21CallAmmoAI")
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_JumpIfInTargetInventory("IsRed", 1, "ClearTarget")
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 3, 2)
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 2, "ClearTarget")
		MGMR E 0 A_JumpIfInventory("TE21CallAmmoAI", 6, "Reload")
		MGMR E 0 A_FaceTarget
		MGMR E 0 A_PlayWeaponSound("toxin/fire")
		MGMR E 0 A_CustomMissile("TiberiumDart", 36, 10, 2+random(-3,0))//5
		MGMR E 0 NoiseAlert (0, 0)
		MGMR E 0 A_GiveInventory("TE21CallAmmoAI")
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_JumpIfInTargetInventory("IsRed", 1, "ClearTarget")
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 3, 2)
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 2, "ClearTarget")
		MGMR E 0 A_JumpIfInventory("TE21CallAmmoAI", 6, "Reload")
		MGMR E 0 A_FaceTarget
		MGMR E 0 A_PlayWeaponSound("toxin/fire")
		MGMR E 0 A_CustomMissile("TiberiumDart", 36, 10, 2+random(-3,0))//6
		MGMR E 0 NoiseAlert (0, 0)
		MGMR E 0 A_GiveInventory("TE21CallAmmoAI")
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-192, 1, 0, 0)
	Reload:
		MGMR E 0 A_FaceTarget
		MGMR E 0 A_TakeInventory("TE21CallAmmoAI", 6)
		MGMR E 0 A_GiveInventory("TiberiumRifleCooldown")
		MGMR A 1 A_Recoil (-0.368856)
		MGMR A 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR A 0 A_FaceTarget
		MGMR A 1 A_Recoil (-0.368856)
		MGMR A 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR A 0 A_FaceTarget
		MGMR A 1 A_Recoil (-0.368856)
		MGMR A 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR A 0 A_FaceTarget
		MGMR A 1 A_Recoil (-0.368856)
		MGMR A 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR A 0 A_FaceTarget
		MGMR B 1 A_Recoil (-0.368856)
		MGMR B 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR B 0 A_FaceTarget
		MGMR B 1 A_Recoil (-0.368856)
		MGMR B 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR B 0 A_FaceTarget
		MGMR B 1 A_Recoil (-0.368856)
		MGMR B 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR B 0 A_FaceTarget
		MGMR B 1 A_Recoil (-0.368856)
		MGMR B 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR B 0 A_FaceTarget
		MGMR C 1 A_Recoil (-0.368856)
		MGMR C 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR C 0 A_FaceTarget
		MGMR C 1 A_Recoil (-0.368856)
		MGMR C 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR C 0 A_FaceTarget
		MGMR C 1 A_Recoil (-0.368856)
		MGMR C 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR C 0 A_FaceTarget
		MGMR C 1 A_Recoil (-0.368856)
		MGMR C 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR C 0 A_FaceTarget
		MGMR D 1 A_Recoil (-0.368856)
		MGMR D 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR D 0 A_ClearTarget
		MGMR D 0 A_Chase ("", "")
		MGMR D 0 A_SpidRefire
		MGMR D 0 A_Jump (random(0, 64), 1)
		Goto Missile2
		MGMR D 0 A_FaceTarget
		MGMR D 1 A_Recoil (-0.368856)
		MGMR D 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR D 0 A_FaceTarget
		MGMR D 1 A_Recoil (-0.368856)
		MGMR D 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR D 0 A_FaceTarget
		MGMR D 1 A_Recoil (-0.368856)
		MGMR A 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR A 0 A_FaceTarget
		MGMR A 1 A_Recoil (-0.368856)
		MGMR A 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR A 0 A_FaceTarget
		MGMR A 1 A_Recoil (-0.368856)
		MGMR A 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR A 0 A_Jump (random(128, 256), 44)
		MGMR A 0 A_FaceTarget
		MGMR A 1 A_Recoil (-0.368856)
		MGMR A 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR A 0 A_FaceTarget
		MGMR A 1 A_Recoil (-0.368856)
		MGMR A 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR A 0 A_FaceTarget
		MGMR B 1 A_Recoil (-0.368856)
		MGMR B 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR B 0 A_FaceTarget
		MGMR B 1 A_Recoil (-0.368856)
		MGMR B 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR B 0 A_FaceTarget
		MGMR B 1 A_Recoil (-0.368856)
		MGMR B 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR B 0 A_FaceTarget
		MGMR B 1 A_Recoil (-0.368856)
		MGMR B 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR B 0 A_FaceTarget
		MGMR C 1 A_Recoil (-0.368856)
		MGMR C 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR C 0 A_FaceTarget
		MGMR C 1 A_Recoil (-0.368856)
		MGMR C 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR C 0 A_FaceTarget
		MGMR C 1 A_Recoil (-0.368856)
		MGMR C 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR C 0 A_FaceTarget
		MGMR C 1 A_Recoil (-0.368856)
		MGMR C 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR C 0 A_FaceTarget
		MGMR D 1 A_Recoil (-0.368856)
		MGMR D 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR D 0 A_FaceTarget
		MGMR D 1 A_Recoil (-0.368856)
		MGMR D 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR D 0 A_FaceTarget
		MGMR D 1 A_Recoil (-0.368856)
		MGMR D 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR D 0 A_FaceTarget
		MGMR D 1 A_Recoil (-0.368856)
		MGMR D 0 ThrustThing (angle*256/360-192, 1, 0, 0)
		MGMR D 0 A_SpidRefire
		Goto Missile2
		MGMR D 0 A_SpidRefire
		Goto Missile2
	Missile3:
		MGMR E 0 A_Jump (random(64, 256), 1)
		Goto Missile2+1
		MGMR E 0 A_JumpIfInTargetInventory("IsRed", 1, "ClearTarget")
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 3, 2)
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 2, "ClearTarget")
		MGMR E 0 A_JumpIfInventory("TE21CallAmmoAI", 6, "ReloadR")
		MGMR E 0 A_FaceTarget
		//MGMR E 0 A_PlayWeaponSound("toxin/fire")
		MGMR E 0 A_CustomMissile("TiberiumDart", 36, 10, 2+random(-3,0))//1
		MGMR E 0 NoiseAlert (0, 0)
		MGMR E 0 A_GiveInventory("TE21CallAmmoAI")
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 Bright A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 Bright A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 Bright A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_JumpIfInTargetInventory("IsRed", 1, "ClearTarget")
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 3, 2)
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 2, "ClearTarget")
		MGMR E 0 A_JumpIfInventory("TE21CallAmmoAI", 6, "ReloadR")
		MGMR E 0 A_FaceTarget
		MGMR E 0 A_PlayWeaponSound("toxin/fire")
		MGMR E 0 A_CustomMissile("TiberiumDart", 36, 10, 2+random(-3,0))//2
		MGMR E 0 NoiseAlert (0, 0)
		MGMR E 0 A_GiveInventory("TE21CallAmmoAI")
		MGMR E 1 Bright A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 Bright A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 Bright A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 Bright A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_JumpIfInTargetInventory("IsRed", 1, "ClearTarget")
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 3, 2)
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 2, "ClearTarget")
		MGMR E 0 A_JumpIfInventory("TE21CallAmmoAI", 6, "ReloadR")
		MGMR E 0 A_FaceTarget
		MGMR E 0 A_PlayWeaponSound("toxin/fire")
		MGMR E 0 A_CustomMissile("TiberiumDart", 36, 10, 2+random(-3,0))//3
		MGMR E 0 NoiseAlert (0, 0)
		MGMR E 0 A_GiveInventory("TE21CallAmmoAI")
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_JumpIfInTargetInventory("IsRed", 1, "ClearTarget")
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 3, 2)
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 2, "ClearTarget")
		MGMR E 0 A_JumpIfInventory("TE21CallAmmoAI", 6, "ReloadR")
		MGMR E 0 A_FaceTarget
		MGMR E 0 A_PlayWeaponSound("toxin/fire")
		MGMR E 0 A_CustomMissile("TiberiumDart", 36, 10, 2+random(-3,0))//4
		MGMR E 0 NoiseAlert (0, 0)
		MGMR E 0 A_GiveInventory("TE21CallAmmoAI")
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_JumpIfInTargetInventory("IsRed", 1, "ClearTarget")
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 3, 2)
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 2, "ClearTarget")
		MGMR E 0 A_JumpIfInventory("TE21CallAmmoAI", 6, "ReloadR")
		MGMR E 0 A_FaceTarget
		MGMR E 0 A_PlayWeaponSound("toxin/fire")
		MGMR E 0 A_CustomMissile("TiberiumDart", 36, 10, 2+random(-3,0))//5
		MGMR E 0 NoiseAlert (0, 0)
		MGMR E 0 A_GiveInventory("TE21CallAmmoAI")
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_JumpIfInTargetInventory("IsRed", 1, "ClearTarget")
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 3, 2)
		MGMR E 0 A_JumpIfInTargetInventory("StealthMode", 2, "ClearTarget")
		MGMR E 0 A_JumpIfInventory("TE21CallAmmoAI", 6, "ReloadR")
		MGMR E 0 A_FaceTarget
		MGMR E 0 A_PlayWeaponSound("toxin/fire")
		MGMR E 0 A_CustomMissile("TiberiumDart", 36, 10, 2+random(-3,0))//2
		MGMR E 0 NoiseAlert (0, 0)
		MGMR E 0 A_GiveInventory("TE21CallAmmoAI")
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR E 0 A_FaceTarget
		MGMR E 1 A_Recoil (-0.368856)
		MGMR E 0 ThrustThing (angle*256/360-64, 1, 0, 0)
	ReloadR:
		MGMR E 0 A_FaceTarget
		MGMR E 0 A_TakeInventory("TE21CallAmmoAI", 6)
		MGMR E 0 A_GiveInventory("TiberiumRifleCooldown")
		MGMR A 1 A_Recoil (-0.368856)
		MGMR A 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR A 0 A_FaceTarget
		MGMR A 1 A_Recoil (-0.368856)
		MGMR A 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR A 0 A_FaceTarget
		MGMR A 1 A_Recoil (-0.368856)
		MGMR A 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR A 0 A_FaceTarget
		MGMR A 1 A_Recoil (-0.368856)
		MGMR A 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR A 0 A_FaceTarget
		MGMR B 1 A_Recoil (-0.368856)
		MGMR B 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR B 0 A_FaceTarget
		MGMR B 1 A_Recoil (-0.368856)
		MGMR B 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR B 0 A_FaceTarget
		MGMR B 1 A_Recoil (-0.368856)
		MGMR B 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR B 0 A_FaceTarget
		MGMR B 1 A_Recoil (-0.368856)
		MGMR B 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR B 0 A_FaceTarget
		MGMR C 1 A_Recoil (-0.368856)
		MGMR C 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR C 0 A_FaceTarget
		MGMR C 1 A_Recoil (-0.368856)
		MGMR C 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR C 0 A_FaceTarget
		MGMR C 1 A_Recoil (-0.368856)
		MGMR C 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR C 0 A_FaceTarget
		MGMR C 1 A_Recoil (-0.368856)
		MGMR C 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR C 0 A_FaceTarget
		MGMR D 1 A_Recoil (-0.368856)
		MGMR D 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR D 0 A_ClearTarget
		MGMR D 0 A_Chase ("", "")
		MGMR D 0 A_SpidRefire
		MGMR D 0 A_Jump (random(0, 64), 1)
		Goto Missile3
		MGMR D 0 A_FaceTarget
		MGMR D 1 A_Recoil (-0.368856)
		MGMR D 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR D 0 A_FaceTarget
		MGMR D 1 A_Recoil (-0.368856)
		MGMR D 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR D 0 A_FaceTarget
		MGMR D 1 A_Recoil (-0.368856)
		MGMR A 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR A 0 A_FaceTarget
		MGMR A 1 A_Recoil (-0.368856)
		MGMR A 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR A 0 A_FaceTarget
		MGMR A 1 A_Recoil (-0.368856)
		MGMR A 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR A 0 A_Jump (random(128, 256), 44)
		MGMR A 0 A_FaceTarget
		MGMR A 1 A_Recoil (-0.368856)
		MGMR A 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR A 0 A_FaceTarget
		MGMR A 1 A_Recoil (-0.368856)
		MGMR A 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR A 0 A_FaceTarget
		MGMR B 1 A_Recoil (-0.368856)
		MGMR B 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR B 0 A_FaceTarget
		MGMR B 1 A_Recoil (-0.368856)
		MGMR B 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR B 0 A_FaceTarget
		MGMR B 1 A_Recoil (-0.368856)
		MGMR B 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR B 0 A_FaceTarget
		MGMR B 1 A_Recoil (-0.368856)
		MGMR B 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR B 0 A_FaceTarget
		MGMR C 1 A_Recoil (-0.368856)
		MGMR C 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR C 0 A_FaceTarget
		MGMR C 1 A_Recoil (-0.368856)
		MGMR C 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR C 0 A_FaceTarget
		MGMR C 1 A_Recoil (-0.368856)
		MGMR C 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR C 0 A_FaceTarget
		MGMR C 1 A_Recoil (-0.368856)
		MGMR C 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR C 0 A_FaceTarget
		MGMR D 1 A_Recoil (-0.368856)
		MGMR D 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR D 0 A_FaceTarget
		MGMR D 1 A_Recoil (-0.368856)
		MGMR D 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR D 0 A_FaceTarget
		MGMR D 1 A_Recoil (-0.368856)
		MGMR D 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR D 0 A_FaceTarget
		MGMR D 1 A_Recoil (-0.368856)
		MGMR D 0 ThrustThing (angle*256/360-64, 1, 0, 0)
		MGMR D 0 A_SpidRefire
		Goto Missile3
		MGMR D 0 A_SpidRefire
		Goto Missile3








//-----------------------------------------------------------------------
//
//				Pain, death and respawn states.
//
//-----------------------------------------------------------------------


	Pain.FireSpecial:
		Goto DisablePushablePreAlternatePainBackOff
	Pain.Fire:
		MGMR G 0 ACS_ExecuteAlways(974, 0)
		Goto DisablePushablePreAlternatePainBackOff
	Pain.ChemicalSpecial:
		Goto DisablePushablePreAlternatePainBackOff
	Pain.Chemical:
		MGMR G 0 ACS_ExecuteAlways(361, 0)
		Goto DisablePushablePreAlternatePainBackOff

	Pain:
		MGMR G 0
		MGMR G 0 //A_Jump (256, "DisablePushablePreAlternatePainBackOff")
		Goto DisablePushablePreAlternatePainBackOff

	DisablePushablePreAlternatePainBackOff: //If woken up by getting hurt, clear the +PUSHABLE flag.
		MGMR G 0 A_ChangeFlag ("PUSHABLE", 0)
		//MGMR G 0 A_Jump (256, "AlternatePainBackOff")
		Goto AlternatePainBackOff


//-----------------------------------------------------------------------


	AlternatePainBackOff:
		MGMR G 0 A_Jump (256, 2,3)
		MGMR G 0
		Goto PainBackOffBackwards
		MGMR G 0
		Goto PainBackOffBackwardsAndLeft
		MGMR G 0
		Goto PainBackOffBackwardsAndRight


	PainBackOffBackwards:
		MGMR G 0 A_FaceTarget
		MGMR G 4 A_Recoil (3.675)
		MGMR G 0 A_Pain
		MGMR G 4 A_Recoil (3.675)
		//MGMR G 0 A_Jump (256, "CheckIfTargetInLOS") //Try to attack right back if possible.
		Goto CheckIfTargetInLOS

	PainBackOffBackwardsAndLeft:
		MGMR G 0 A_FaceTarget
		MGMR G 4 A_Recoil (0.504)
		MGMR G 0 ThrustThing (angle*256/360+166.7, 4, 0, 0)
		MGMR G 0 A_Pain
		MGMR G 4 A_Recoil (0.504)
		MGMR G 0 ThrustThing (angle*256/360+166.7, 4, 0, 0)
		//MGMR G 0 A_Jump (256, "CheckIfTargetInLOS")
		Goto CheckIfTargetInLOS

	PainBackOffBackwardsAndRight:
		MGMR G 0 A_FaceTarget
		MGMR G 4 A_Recoil (0.504)
		MGMR G 0 ThrustThing (angle*256/360-166.7, 4, 0, 0)
		MGMR G 0 A_Pain
		MGMR G 4 A_Recoil (0.504)
		MGMR G 0 ThrustThing (angle*256/360-166.7, 4, 0, 0)
		//MGMR G 0 A_Jump (256, "CheckIfTargetInLOS")
		Goto CheckIfTargetInLOS


//-----------------------------------------------------------------------


	Death:
		MGMR H 8
		MGMR I 6 A_PlayerScream
		MGMR J 6 A_NoBlocking
		MGMR KLM 6
		MGMR N -1
		Stop

	XDeath:
		MGMR O 4
		MGMR P 0 A_NoBlocking
		MGMR PPP 0 A_SpawnItemEx("Credits1",random(-4,4),random(-4,4),random(32,48),random(-4,4),random(-4,4),random(4,8),0,0,128)
		MGMR P 0 A_SpawnItemEx("PowerupCrate",random(-4,4),random(-4,4),random(32,48),random(2,4),random(-2,2),random(2,4),0,0,230)
		MGMR P 0 A_Scream
		MGMR P 0 A_PlaySound ("misc/gib", 7)
		MGMR P 0 A_PlaySound ("misc/gib", 6)
		MGMR P 4 A_SpawnItemEx ("MarineGoreExplosion")
		MGMR Q 4 A_SpawnItemEx ("MarineGoreExplosion2")
		MGMR R 4 A_SpawnItemEx ("MarineGoreExplosion3")
		MGMR STUV 4
		MGMR W -1
		stop

	Death.MassDriver:
	Death.AntiArmor:
	Death.Explosion:
		MGMR H 0 ThrustThing(angle*256/360+(random(0,192)), random(20,40), 1, 0)
		MGMR H 1 ThrustThingZ(0,45,0,0)
		MGMR H 0 A_Jump(128,"Death")
		goto XDeath

	Death.FireSpecial:
	Death.Fire:
		// stop all sound channels
		MGMR A 0 A_StopSound (0) MGMR A 0 A_StopSound (4)
		MGMR A 0 A_StopSound (1) MGMR A 0 A_StopSound (5)
		MGMR A 0 A_StopSound (2) MGMR A 0 A_StopSound (6)
		MGMR A 0 A_StopSound (3) MGMR A 0 A_StopSound (7)
		DISR K 0 A_SpawnItemEx("BurningCorpse",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0)
		DISR K 0 A_NoBlocking
		MGMR N -1 A_SetTranslucent(0.0,0)
		stop

	Death.ChemicalSpecial:
	Death.Chemical:
		// stop all sound channels
		MGMR A 0 A_StopSound (0) MGMR A 0 A_StopSound (4)
		MGMR A 0 A_StopSound (1) MGMR A 0 A_StopSound (5)
		MGMR A 0 A_StopSound (2) MGMR A 0 A_StopSound (6)
		MGMR A 0 A_StopSound (3) MGMR A 0 A_StopSound (7)
		DISR K 0 A_SpawnItemEx("ChemicalCorpse",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0)
		DISR K 0 A_NoBlocking
		MGMR N -1 A_SetTranslucent(0.0,0)
		stop

	Dismiss:
		TNT1 A 0 A_SpawnItemEx ("TeleportFog", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION)
		stop






//-----------------------------------------------------------------------
//
//						Timer states.
//
//-----------------------------------------------------------------------


	AddToTimers:
		MGMR A 0 A_GiveInventory ("ClearTarget", 1)
		MGMR A 0 A_CheckSight ("AddToNoPlayerInSightTimer") //No point in adding a counter if the Player has been out of sight for only a few frames.

		MGMR A 0 A_JumpIfInventory ("NoPlayerInSight", 0, "CheckTimers")
		MGMR A 0 A_TakeInventory ("NoPlayerInSight", 128) //If Player in sight, clear this timer. Otherwise, the marine will sometimes suddenly stop and start idling when you go around a corner.
		//MGMR A 0 A_Jump (256, "CheckTimers")
		Goto CheckTimers
	//These two act as one state.
	AddToNoPlayerInSightTimer:
		MGMR A 0 A_GiveInventory ("NoPlayerInSight", 1)
		//MGMR A 0 A_Jump (256, "CheckTimers")
		Goto CheckTimers

	CheckTimers:
		MGMR A 0 A_JumpIfInventory ("ClearTarget", 1, "ClearTarget")
		MGMR A 0 A_JumpIfInventory ("NoPlayerInSight", 128, "CheckIfPlayerInSight")
		//MGMR A 0 A_Jump (256, "AlternateChase")
		Goto AlternateChase


	ClearTarget:
		MGMR A 0 A_TakeInventory ("ClearTarget", 1)
		MGMR A 0 A_ClearTarget
		//MGMR A 0 A_Jump (256, "CheckTimers") //In case both of the timers have been reached, check again so that the other one will reset as well.
		Goto CheckTimers

	CheckIfPlayerInSight:
		MGMR A 0 A_TakeInventory ("NoPlayerInSight", 128)
		MGMR A 0 A_CheckSight ("EnablePushablePreIdle")
		//MGMR A 0 A_Jump (256, "CheckTimers")
		Goto CheckTimers


//-----------------------------------------------------------------------


	ResetTimers: //This is ONLY connected to "See", "Missile" and "Pain" states. Reset timers so that the marines don't all of sudden decide to idle in the middle of a battle.
		MGMR A 0 A_JumpIfInventory ("ClearTarget", 0, 4)
		MGMR A 0 A_TakeInventory ("ClearTarget", 2)
		MGMR A 0 A_JumpIfInventory ("NoPlayerInSight", 0, 2)
		MGMR A 0 A_TakeInventory ("NoPlayerInSight", 128)
		MGMR A 0
		//MGMR A 0 A_Jump (256, "AlternateChase")
		Goto AlternateChase
	}
}

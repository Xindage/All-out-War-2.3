// UTILITY DEFINITIONS

#define MAX_PARTICLEFUSER_DATA MAX_MENU_CATEGORIES * MAX_MENU_ITEMS
#define PF_AMMOCACHE			0
#define PF_MEDICALCACHE			1
#define PF_MINIREFINERY			2
#define PF_GLOBALHEALTHREGEN	3
#define PF_GLOBALAMMOREGEN		4
#define PF_C4BOX				5
#define PF_FULLREFILL			6
#define PF_RIFLE				7
#define PF_MACHINEGUN			8
#define PF_FIREPROOF			9
#define PF_CHEMPROOF			10
#define PF_RAVEN				11
#define PF_WOLVERINE			12
#define PF_GUNTURRET			13
#define PF_MECHTURRET			14
#define PF_PROXYMINE			15
#define PF_MINIRAVEN			16
#define PF_KLAXONTURRET			17
#define PF_RIFLETURRET			18
#define PF_REPAIRTURRET			19
#define PF_ARTILLERYTURRET		20
#define PF_RAZORWIRE			21
#define PF_SANDBAGS				22
#define PF_TELEPORTERNODE		23
#define PF_PLATFORM				24
#define PF_STEP_1UP				25
#define PF_STEP_1STRAIGHT		26
#define PF_STEP_1DOWN			27
#define PF_STEP_3UP				28
#define PF_STEP_3STRAIGHT		29
#define PF_STEP_3DOWN			30
#define PF_SUPERCACHE			31
#define PF_FLAMETURRET			32
#define PF_CHEMTURRET			33
int g_ParticleFuserData_int[MAX_PARTICLEFUSER_DATA][MAX_UTILKEYS_int];
int g_ParticleFuserData_str[MAX_PARTICLEFUSER_DATA][MAX_UTILKEYS_str];

function void InitParticleFuserData (void) {
	if (g_ParticleFuserData_int[0][0] != 0)
		return;
	
	// =========================================================================
	// CACHE DEFINITIONS
	PF_AddDef (0, 0, PF_AMMOCACHE, "Ammo Cache", 0, 400, 6.5,
		"Dispenses ammo packs.");
	PF_AddDef (0, 1, PF_MEDICALCACHE, "Medical Cache", 0, 400, 6.5,
		"Dispenses stimpacks");
	PF_AddDef (0, 2, PF_SUPERCACHE, "Super Cache", 0, 800, 14.0,
		"Dispenses stimpacks and backpacks.");
	PF_AddDef (0, 3, PF_MINIREFINERY, "Mini-Refinery", 2250, 6500, 36.0,
		"Enhances credit flow. Must be built into\na \cDTiberium field.");
	PF_AddDef (0, 4, PF_GLOBALHEALTHREGEN, "Global Health Regen", 2250, 10000, 36.0,
		"Provides 1HP/sec health regeration for\nyour team. Must be built\ninto the \cFRepair Facility.");
	PF_AddDef (0, 5, PF_GLOBALAMMOREGEN, "Global Ammo Regen\n", 2250, 10000, 36.0,
		"Provides slow ammunition regeneration\nfor your team. Must be\nbuilt into the \cFRepair Facility.");
	
	// =========================================================================
	// PICKUP DEFINITIONS
	PF_AddDef (1, 0, PF_C4BOX, "C4 Box", 0, 0, 6.0,
		"A box filled with various explosives.\nRefills all of the picker's C4\nexplosives.");
	PF_AddDef (1, 1, PF_FULLREFILL, "Full refill pack", 0, 0, 7.0,
		"A backpack into which has been\ncompressed enough ammunition to\nrefill all of its picker's weapons.");
	PF_AddDef (1, 2, PF_RIFLE, "Rifle", 0, 0, 4.5,
		"A standard issue military rifle equipped\nwith rifle grenades.");
	PF_AddDef (1, 3, PF_MACHINEGUN, "Machine gun", 0, 0, 6.0,
		"A standard issue machine gun capable\nof tap firing.");
	PF_AddDef (1, 4, PF_FIREPROOF, "Fireproof armor", 100, 0, 9.0,
		"Gives the user total immunity against\nfire-based attacks.");
	PF_AddDef (1, 5, PF_CHEMPROOF, "Chemicalproof armor", 100, 0, 9.0,
		"Gives the user total immunity against\nchemical-based attacks.");
	PF_AddDef (1, 6, PF_RAVEN, "Raven mech", 1500, 2000, 18.0,
		"A basic, fast mech armed with LRM-5:s\nand an AC2 rotary gun.");
	PF_AddDef (1, 7, PF_WOLVERINE, "Wolverine mech", 2000, 3000, 18.0,
		"A heavier mech with LRM-10:s, a minigun\nand a pulse cannon.");
	
	// =========================================================================
	// DEFENSE DEFINITIONS
	PF_AddDef (2, 0, PF_GUNTURRET, "Gun turret", 50, 250, 3.5,
		"Basic gattling gun-armed turret that\nshoots enemies on sight");
	PF_AddDef (2, 1, PF_MECHTURRET, "Anti-Mech turret", 80, 500, 3.5,
		"Turret armed with heavy, metal-tearing\nbullets designed against mech walkers.");
	PF_AddDef (2, 2, PF_PROXYMINE, "Proximity mines", 80, 300, 3.5,
		"Batch of proximity mines, useful for\narea denial.");
	PF_AddDef (2, 3, PF_MINIRAVEN, "Mini-Raven companion", 150, 750, 12.0,
		"A mini-version of the Raven with AI.\nPatrols the base and follows\nteammates.");
	PF_AddDef (2, 4, PF_KLAXONTURRET, "Klaxon Turret", 100, 250, 3.5,
		"An advanced, stronger version of the\ngun turret with a klaxon alarm. Best\nused in closed areas.");
	PF_AddDef (2, 5, PF_RIFLETURRET, "Precision Turret", 125, 300, 3.5,
		"A turret fitted with a more accurate\nrifle and a scoping system, designed\nfor open area usage.");
	PF_AddDef (2, 6, PF_REPAIRTURRET, "Repair Turret", 135, 500, 3.5,
		"A turret with a repair gun. Place in\nfront of terminals for automatic\nrepairing.");
	PF_AddDef (2, 7, PF_ARTILLERYTURRET, "Artillery Turret", 200, 400, 3.5,
		"An anti-mech turret with 80mm shells\ndesigned for taking down walkers.\nIts specialization, however, renders\nit useless against infantry.");
	PF_AddDef (2, 8, PF_FLAMETURRET, "Flame Turret", 200, 300, 3.5,
		"A mounted flame thrower.\nBest Placed in medium to close-range areas.");
	PF_AddDef (2, 9, PF_CHEMTURRET, "Chemical Turret", 200, 300, 3.5,
		"A mounter chemical sprayer.\nBest placed in medium to close-range areas.");
	
	// =========================================================================
	// GEOMETRY
	PF_AddDef (3, 0, PF_RAZORWIRE, "Razor Wire", 0, 400, 6.0,
		"Four meters of razor wire for area\ndenial.");
	PF_AddDef (3, 1, PF_SANDBAGS, "Sandbag Wall", 0, 750, 5.0,
		"Big, blocking, solid wall made of\nsandbags. 'Nuff said.");
	PF_AddDef (3, 2, PF_TELEPORTERNODE, "Teleporter Node", 250, 3000, 18.0,
		"Want a two-way teleporter from here\nto there? Just make two of these and\nyou're set.");
	PF_AddDef (3, 3, PF_PLATFORM, "Floating Platform", 150, 2000, 18.0,
		"Large floating platform on what other\nbuildables can be spawned.");
	PF_AddDef (3, 4, PF_STEP_1UP, "1 Step UP", 0, 200, 1.5, "");
	PF_AddDef (3, 5, PF_STEP_1STRAIGHT, "1 Step STRAIGHT", 0, 200, 1.5, "");
	PF_AddDef (3, 6, PF_STEP_1DOWN, "1 Step DOWN", 0, 200, 1.5, "");
	PF_AddDef (3, 7, PF_STEP_3UP, "3 Step UP", 0, 200, 1.5, "");
	PF_AddDef (3, 8, PF_STEP_3STRAIGHT, "3 Steps STRAIGHT", 0, 200, 1.5, "");
	PF_AddDef (3, 9, PF_STEP_3DOWN, "3 Step DOWN", 0, 200, 1.5, "");
}

// =============================================================================
function void PF_AddDef (int i, int j, int id, str name, int cost, int health,
	int buildtime, str description)
{
	if (id < 0 || id >= MAX_PARTICLEFUSER_DATA)
		FatalError ("PF_AddDef: Bad id given!");
	
	if (i < 0 || j < 0 || i >= MAX_MENU_CATEGORIES || j >= MAX_MENU_ITEMS)
		FatalError5f ("PF_AddDef: Tried to insert particle fuser definition %s to bogus index %d:%d! Max is %d:%d",
			name, i, j, MAX_MENU_CATEGORIES, MAX_MENU_ITEMS);
	
	g_ParticleFuserData_str[id][UK_NAME] = name;
	g_ParticleFuserData_int[id][UK_COST] = cost;
	g_ParticleFuserData_int[id][UK_HEALTH] = health;
	g_ParticleFuserData_int[id][UK_BUILDTIME] = buildtime;
	g_ParticleFuserData_Str[id][UK_DESCRIPTION] = description;
	g_ParticleFuserData_int[id][UK_MENUCATEGORY] = i;
	g_ParticleFuserData_int[id][UK_MENUELEMENT] = j;
}

function int PF_FindDefByMenuCoords (int i, int j) {
	for (int x = 0; x < MAX_PARTICLEFUSER_DATA; x++) {
		if (g_ParticleFuserData_str[x][UK_NAME] == 0)
			continue;
		
		if (g_ParticleFuserData_int[x][UK_MENUCATEGORY] != i)
			continue;
		
		if (g_ParticleFuserData_int[x][UK_MENUELEMENT] != j)
			continue;
		
		return x;
	}
	
	FatalError2f ("PF_FindByMenuCoords: Couldn't find any particle fuser definition at %d:%d", i, j);
	return -1;
}

function int PF_FindDef (str label) {
	for (int x = 0; x < MAX_PARTICLEFUSER_DATA; x++)
		if (g_ParticleFuserData_str[x][UK_NAME] == label)
			return x;
	
	FatalError1f ("PF_Find: Couldn't find any particle fuser definition with label %s", label);
	return -1;
}
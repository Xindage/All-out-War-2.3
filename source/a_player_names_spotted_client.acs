function str GetActorName(int tid)
{
	str actorName = GetActorClass(tid);
	if(actorName == "TimedC4ArmedBlue" || actorName == "TimedC4Armed")
	{
		return strparam(s:"C4");
	}
	
	if(actorName == "NuclearStrikeBeaconArmed")
	{
		return strparam(s:"Nuke");
	}
	if(actorName == "IonCannonBeaconArmed")
	{
		return strparam(s:"Ion");
	}
	
	if(actorName == "Utility_GunTurretRed" || actorName == "Utility_GunTurretBlue")
	{
		return strparam(s:"Gun T.");
	}
	
	if(actorName == "Utility_ChemTurretRed" || actorName == "Utility_ChemTurretBlue")
	{
		return strparam(s:"Chem T.");
	}
	
	if(actorName == "Utility_FlameTurretRed" || actorName == "Utility_FlameTurretBlue")
	{
		return strparam(s:"Flame T.");
	}
	
	if(actorName == "Utility_PrecisionTurretRed" || actorName == "Utility_PrecisionTurretBlue")
	{
		return strparam(s:"Precision T.");
	}
	
	if(actorName == "Utility_ArtilleryTurretRed" || actorName == "Utility_ArtilleryTurretBlue")
	{
		return strparam(s:"Art T.");
	}
	
	if(actorName == "Utility_RepairGunTurretRed" || actorName == "Utility_RepairGunTurretBlue")
	{
		return strparam(s:"Rep T.");
	}
	
	if(actorName == "Utility_KlaxonRed" || actorName == "Utility_KlaxonBlue")
	{
		return strparam(s:"Klaxon T.");
	}
	
	if(actorName == "Utility_MiniRavenRed" || actorName == "Utility_MiniRavenBlue")
	{
		return strparam(s:"MiniRaven");
	}
	
	if(actorName == "TeleporterNodeRed" || actorName == "TeleporterNodeBlue")
	{
		return strparam(s:"Teleport");
	}
	
	return strparam(s:"None");
}

function str GetActorTeam(int tid)
{
	str actorName = GetActorClass(tid);
	
	if(actorName == "TimedC4ArmedBlue" ||
		actorName == "IonCannonBeaconArmed" ||
		actorName == "Utility_GunTurretBlue" ||
		actorName == "Utility_ChemTurretBlue" ||
		actorName == "Utility_FlameTurretBlue" ||
		actorName == "Utility_PrecisionTurretBlue" ||
		actorName == "Utility_ArtilleryTurretBlue" ||
		actorName == "Utility_RepairGunTurretBlue" ||
		actorName == "Utility_KlaxonBlue" ||
		actorName == "Utility_MiniRavenBlue" ||
		actorName == "TeleporterNodeBlue")
	{
		return 0;
	}
	else if(actorName == "TimedC4Armed" ||
		actorName == "NuclearStrikeBeaconArmed" ||
		actorName == "Utility_GunTurretRed" ||
		actorName == "Utility_ChemTurretRed" ||
		actorName == "Utility_FlameTurretRed" ||
		actorName == "Utility_PrecisionTurretRed" ||
		actorName == "Utility_ArtilleryTurretRed" ||
		actorName == "Utility_RepairGunTurretRed" ||
		actorName == "Utility_KlaxonRed" ||
		actorName == "Utility_MiniRavenRed" ||
		actorName == "TeleporterNodeRed")
	{
		return 1;
	}
	return -1;
}

//receives server data
SCRIPT SC_SPOT_HANDLER_CL(int sp_tid) CLIENTSIDE
{
    //print(s:"receive spot: ", s:sp_tid);
	bool found = false;
	for(int i = 0; i < MAX_SPOTTED_ACTORS_CLIENT; i++)
	{
		if(ALL_VARS[SPOTTED_ACTORS_CLIENT][i][0] == sp_tid)
		{
		    //print(s:"spot again: ", s:sp_tid);
			ALL_VARS[SPOTTED_TIMEOUTS_CLIENT][i][0] = timer();		
			found = true;
			break;
		}
	}
	
	if(!found)
	{
		for(i = 0; i < MAX_SPOTTED_ACTORS_CLIENT; i++)
		{
			if(ALL_VARS[SPOTTED_ACTORS_CLIENT][i][0] == 0)
			{
			    //print(s:"spot first: ", s:sp_tid);
				ALL_VARS[SPOTTED_ACTORS_CLIENT][i][0] = sp_tid;
				ALL_VARS[SPOTTED_TIMEOUTS_CLIENT][i][0] = timer();
				break;
			}
		}	
	}
}


SCRIPT SC_SPOT_TIMEOUT_CL ENTER CLIENTSIDE
{
	while(true)
	{
		delay(1);
		
		for(int i = 0; i < MAX_SPOTTED_ACTORS_CLIENT; i++)
		{
			int TID = ALL_VARS[SPOTTED_ACTORS_CLIENT][i][0];
			if(TID == 0)
			{
				continue;
			}
			
			bool needToUnspot = false;
			bool isPlayer = TID >= 3800 && TID < 3800 + MAXPLAYERS;
			
			if(isPlayer)
			{
				int playerN = TID - 3800;
				int inGame = PlayerInGame(playerN);
				if(!inGame)
				{
					needToUnspot = true;
				}
			}
			else // turret, c4, nuke/ion
			{
				bool isUsed = IsTIDUsed(TID);
				if(!isUsed)
				{
					needToUnspot = true;	
				}
			}
			
			//actor is present now check the timeout
			if(!needToUnspot)
			{
				int spotTime = ALL_VARS[SPOTTED_TIMEOUTS_CLIENT][i][0];
				needToUnspot = (timer() - spotTime) > SPOT_DURATION_TIC;
			}
			
			
			if(needToUnspot)
			{
				ALL_VARS[SPOTTED_ACTORS_CLIENT][i][0] = 0;
			}
		}
	}
}


SCRIPT SC_DRAW_SPOTTED_ACTORS_CL(int maxDistance) CLIENTSIDE
{
	int pTeam = PlayerTeam();
	bool recalculateViewMatrix = true;
		
	for(int i = 0; i < MAX_SPOTTED_ACTORS_CLIENT; i++)
	{	
	    int messageIdBase = SPOTTED_NAMES_START + i * PLAYER_SPOTTED_STEP;
	    
		int TID = ALL_VARS[SPOTTED_ACTORS_CLIENT][i][0];
		//str debugMessage = strParam(s:"index: ", i:i, s:"; TID: ", i:TID);
		
		
		bool isPlayer = TID >= 3800 && TID < 3800 + MAXPLAYERS;
		bool isSuccess = false;
		str actorName;
		int targetTeam = -1;
		
		if(isPlayer)
		{
			int targetIndex = TID - 3800;
			targetTeam = GetPlayerTeam(TID - 3800);
			actorName = GetActorClass(TID);
			//debugMessage = strParam(s:debugMessage, s:"; player: ", n:targetIndex + 1);
		}
		else
		{
		    actorName = GetActorName(TID);
        	targetTeam = GetActorTeam(TID);
        	//debugMessage = strParam(s:debugMessage, s:"; item: ", s:actorName);
		}
			
		/*if(targetTeam == 1)
		{
			debugMessage = strParam(s:debugMessage, s:"; team: RED");	
		}
		else if(targetTeam == 0)
		{
			debugMessage = strParam(s:debugMessage, s:"; team: BLUE");	
		}
		else
		{
			debugMessage = strParam(s:debugMessage, s:"; team NONE: ", i:targetTeam);	
		}*/
			
		if(targetTeam != pTeam && targetTeam != -1)
		{
			if(isPlayer)
			{
			    //debugMessage = strParam(s:debugMessage, s:"; HP: ", i:currentHealth);
			    int currentHealth = GetActorHealth(TID);
			    if(currentHealth)
			    {
			        isSuccess = ACS_ExecuteWithResult(SC_PROJECTION_CL, recalculateViewMatrix, TID, maxDistance);
			    }
				
			}	
			else
			{
			isSuccess = ACS_ExecuteWithResult(SC_PROJECTION_CL, recalculateViewMatrix, TID, maxDistance);   
			}
		}
		
		
		if(isSuccess == 1)
        {
        	recalculateViewMatrix = false;
        	//debugMessage = strParam(s:debugMessage, s:"; Projected!");
        		
        	SetFont("SMALLFONT");
        	
        	HudMessage(s:"Enemy: ", s:" \cj[", i:ALL_VARS[RESULT_DISTANCE][0][0],  s:"]"; 
        	HUDMSG_PLAIN, messageIdBase, 
        	CR_DARKRED, ALL_VARS[RESULT_SCREEN_X][0][0], ALL_VARS[RESULT_SCREEN_Y][0][0], 1873);	
        	
        	HudMessage(s:actorName; HUDMSG_PLAIN, messageIdBase + 1, 
        	CR_DARKRED, ALL_VARS[RESULT_SCREEN_X][0][0], ALL_VARS[RESULT_SCREEN_Y][0][0] + 0.015, 1873);	
        }
        {
        	//debugMessage = strParam(s:debugMessage, s:"; Projection failed: ", i:isSuccess);
        }
		
		//HudMessage(s:debugMessage; HUDMSG_PLAIN, messageIdBase + 2, CR_WHITE, 0.3, 0.1 + FixedMul(0.05, i <<16), 0.5);
	}
}

/*SCRIPT SC_DRAW_NAMES_DEBUG_CL ENTER CLIENTSIDE
{
	while(true)
	{
		delay(1);
		
		for(int i = 0; i < MAX_SPOTTED_ACTORS_CLIENT; i ++)
		{
			int targetTID = ALL_VARS[SPOTTED_ACTORS_CLIENT][i][0];
			int time = ALL_VARS[SPOTTED_TIMEOUTS_CLIENT][i][0];
			
			str message = strparam(s:"i: ", i:i, s:" TID: ", i:targetTID);
			bool isPlayer = targetTID >= 3800 && targetTID < 3800 + MAXPLAYERS;
			int targetTeam = -1;
			str targetName = strparam(s:"name none");
			
			if(isPlayer)
			{
				int targetIndex = targetTID - 3800;
				targetName = strparam(n:targetIndex + 1);
				message = strparam(s:message, s:"; ", s:"player name: ", s:targetName);	
				targetTeam = GetPlayerTeam(targetIndex);
			}
			else
			{
				str className = GetActorClass(targetTID);
				targetName = GetActorName(targetTID);
				
				message = strparam(s:message, s:"; ", s:"actor class: ", s: className);	
				message = strparam(s:message, s:"; ", s:"actor name: ", s:"", s:targetName);	
				
				targetTeam = GetActorTeam(targetTID);
			}
			
			if(targetTeam == 1)
			{
				message = strparam(s:message, s:"; ", s:"team: RED");		
			}
			else if(targetTeam == 0)
			{
				message = strparam(s:message, s:"; ", s:"team: BLUE");		
			}
			else
			{
				message = strparam(s:message, s:"; ", s:"team: NONE: ", i:targetTeam);
			}
			
			int timeLeft = timer() - time;
			if(timeLeft > SPOT_DURATION_TIC)
			{
				message = strparam(s:message, s:"; time: out");
			}
			else
			{
				message = strparam(s:message, s:"; time: ", i:timeLeft);	
			}
			
			HudMessage(s:message; HUDMSG_PLAIN, DEBUG_SPOTTED + i, CR_WHITE, 0.7, 0.1 + FixedMul(0.035, i <<16), 0.5);
		}
	}
}*/